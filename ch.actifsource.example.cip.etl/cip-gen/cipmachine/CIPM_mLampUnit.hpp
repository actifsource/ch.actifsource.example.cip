/*********************************************************************
	SYSTEM LampSystem_ETL
	IMPLEMENTATION LampImpl_c
	cip machine header file for CIP MACHINE mLampUnit
	Filename: CIPM_mLampUnit.hpp
	generated by CIP Tool(R)
	
	activated code options:
		C++ code
		use message interface
	            naming option: channel  prefix
	        all types in shell
	        'unsigned long' for delays
*********************************************************************/
#pragma once

#include "../cipshell/INTF_ActionMessagePort.hpp" 
#include "mLampUnit_Router.hpp"       
#include "../cipshell/INTF_mLampUnit.hpp"
#include "../lampcluster/PROC_Button.hpp"
#include "../lampcluster/PROC_Lamp.hpp"


namespace lampunit::cipmachine
{

    /** 
    * class CIPM_mLampUnit
    * cip machine for unit LampUnit
    */
    class CIPM_mLampUnit : public lampunit::cipshell::INTF_mLampUnit
    {
      public: 
            
        /** constructors / destructors */
        explicit
          CIPM_mLampUnit(
            etl::message_router_id_t ciprouter, 
            etl::message_router_id_t pulserouter, 
            lampunit::cipshell::INTF_ActionMessagePort& i_amp);

        virtual ~CIPM_mLampUnit() = default;
	
	/** event message interface */
        /** 
        * Triggers CIP Machine by input message Push (channel ButtonEvents).
        */
        void C1_Push() final;
		
        /** 
        * Triggers CIP Machine by input message Release (channel ButtonEvents).
        */
        void C1_Release() final;
		
       /** extension interface */
			
       /** 
       * Triggers CIP Machine to increment time by one tick.
       */
       virtual void TICK_() final;
	            
       /** 
       * Triggers CIP Machine to execute one pending internal activation.
       *  Search order: CHAIN_, TIMEUP_, READ_
       */
       virtual void STEP_();
	            
       /** 
       * Triggers CIP Machine to execute one pending timeup activation.
       */
       virtual void TIMEUP_();
	            
       /** 
       * Triggers CIP Machine to execute one pending chain activation.
       */
       virtual void CHAIN_();
	            
       /** 
       * Trigger CIP Machine to execute one internally buffered message.
       */
       virtual void READ_();
	            
       /** 
       * Trigger CIP Machine to execute one AUTO_
       */
       virtual void AUTO_();
	
       /** 
       * Test if any local step activation is pending and return the result.
       * @return  if local step activation is pending.
       */
       virtual bool hasSTEP_();
	            
       /** 
       * Test if a chain activation is pending and return the result.
       * @return  if a chain activation is pending.
       */
       virtual bool hasCHAIN_();
	            
       /** 
       * Test if a timeup activation is pending and return the result.
       * @return  if a timeup activation is pending.
       */
       virtual bool hasTIMEUP_();
	            
       /** 
       * Test if a read activation is pending and return the result.
       * @return  if a read activation is pending.
       */
       virtual bool hasREAD_();
	            
       /** 
       * Test if an auto activation is pending and return the result.
       * @return  if a auto activation is pending.
       */
       virtual bool hasAUTO_();
	
    private: 
	            
      /** prohibitted default functions */
	
      CIPM_mLampUnit(const CIPM_mLampUnit&);
      CIPM_mLampUnit& operator=(const CIPM_mLampUnit&);
	
	
      /** member variables */
	            
      /** user implemented output message handler */
      lampunit::cipshell::INTF_ActionMessagePort& m_ActionMessagePort;
			
	
	
      /** Status vectors of cluster LampCluster */
	
      /** Process Button */
      lampunit::lampclustercluster::PROC_Button m_Button;
	            
      /** Process Lamp */
      lampunit::lampclustercluster::PROC_Lamp m_Lamp;
	            
      /** Eventrouter to handle messages and pulses */
      mLampUnit_Router m_eventrouter;
	            
    }; // class CIPM_mLampUnit
	
} // namespace lampunit::cipmachine

/* Actifsource ID=[cfa5dff6-cf03-11ee-91c0-c5a9ed07c9d7,d37d50e5-fb29-11ee-88af-c1ff99c74ce0,d37d50a8-fb29-11ee-88af-c1ff99c74ce0,e83fa4af-fb29-11ee-88af-c1ff99c74ce0,d37d50e4-fb29-11ee-88af-c1ff99c74ce0,d37d50e3-fb29-11ee-88af-c1ff99c74ce0,Hash] */
