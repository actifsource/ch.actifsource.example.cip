/*********************************************************************
	SYSTEM LampSystem_ETL
	IMPLEMENTATION LampImpl_c
	shell header file for CIP SHELL sLampUnit
	Filename: CIPS_sLampUnit.hpp
	generated by CIP Tool(R)
	
	activated code options:
		C++ code
		use message interface
	            naming option: channel  prefix
	        all types in shell
	        'unsigned long' for delays
*********************************************************************/
#pragma once

#include "mLampUnit_Outputs.hpp"
#include "../lampcluster/PROC_Button.hpp"
#include "../lampcluster/PROC_Lamp.hpp"

// include etl libraries
#include "etl/message_packet.h"
#include "etl/hfsm.h"
#include "etl/queue.h"
#include "etl/delegate.h"
#include "etl/array.h"  
#include "etl/variant.h"
#include "etl/message_router.h"
#include "etl/message_packet.h"
#include "etl/queue.h"
#include "etl/multi_array.h"

namespace lampunit::cipmachine
{

    class mLampUnit_Router: 
      public etl::message_router<
      mLampUnit_Router,
      lampunit::cipmachine::mLampUnit_Outputs::Button_off_Pulse,
      lampunit::cipmachine::mLampUnit_Outputs::Button_on_Pulse>
    {

    public:
      using RouterBase = etl::message_router<mLampUnit_Router,
      lampunit::cipmachine::mLampUnit_Outputs::Button_off_Pulse,
      lampunit::cipmachine::mLampUnit_Outputs::Button_on_Pulse>;
 
      explicit mLampUnit_Router
      (
        etl::message_router_id_t routerid,
        lampunit::lampclustercluster::PROC_Button& Button,
        lampunit::lampclustercluster::PROC_Lamp& Lamp
      ):
      RouterBase{routerid},
      m_Button{Button},
      m_Lamp{Lamp}
      {
        // Process: Button
        m_Button.SetupOutput
        (
          lampunit::lampclustercluster::PROC_Button::OutputCb::create<mLampUnit_Router, &mLampUnit_Router::Outpulse>(*this)
        );
        // Process: Lamp
        m_Lamp.SetupOutput
        (
          lampunit::lampclustercluster::PROC_Lamp::OutputCb::create<mLampUnit_Router, &mLampUnit_Router::Outpulse>(*this)
        );
      }
  
      // delete the copy members
      mLampUnit_Router(const mLampUnit_Router&) = delete;
      mLampUnit_Router& operator=(const mLampUnit_Router&) = delete;
  
      void Outpulse( etl::imessage& pulse)
      {
        etl::send_message(*this,pulse);
      }  
    
      void on_receive(const lampunit::cipmachine::mLampUnit_Outputs::Button_off_Pulse& msg)
      {
        m_Lamp.receive(lampunit::cipmachine::mLampUnit_Inputs::Lamp_off_Pulse());
        m_Lamp.publishOutpulses();
      }

      void on_receive(const lampunit::cipmachine::mLampUnit_Outputs::Button_on_Pulse& msg)
      {
        m_Lamp.receive(lampunit::cipmachine::mLampUnit_Inputs::Lamp_on_Pulse());
        m_Lamp.publishOutpulses();
      }

      void on_receive_unknown(const etl::imessage& msg)
      {
        // DEBUG_PRINT("---> Receive unknown");
      }
    
    private:
   
    
      // Processes from machine
      lampunit::lampclustercluster::PROC_Button& m_Button;
      lampunit::lampclustercluster::PROC_Lamp& m_Lamp;
};

} // namespace lampunit::cipmachine

/* Actifsource ID=[cfa804c4-cf03-11ee-91c0-c5a9ed07c9d7,d37d50e5-fb29-11ee-88af-c1ff99c74ce0,d37d50a8-fb29-11ee-88af-c1ff99c74ce0,e83fa4af-fb29-11ee-88af-c1ff99c74ce0,d37d50e4-fb29-11ee-88af-c1ff99c74ce0,d37d50e3-fb29-11ee-88af-c1ff99c74ce0,TA4Vt1fXX9zsGW/hsYgrysJtKM0=] */
