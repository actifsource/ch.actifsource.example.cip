/*********************************************************************
	SYSTEM LampSystem_ETL
	IMPLEMENTATION LampImpl_c
	cip machine file for CIP MACHINE mLampUnit
	Filename: CIPM_mLampUnit.cpp
	generated by CIP Tool(R)
	
	activated code options:
		C++ code
		use message interface
	            naming option: channel  prefix
	        all types in shell
	        'unsigned long' for delays
*********************************************************************/

#include "CIPM_mLampUnit.hpp"
#include "../lampcluster/PROC_Button.hpp"
#include "../lampcluster/PROC_Lamp.hpp"


namespace lampunit::cipmachine
{
       
    /** constructors / destructors */
    CIPM_mLampUnit::CIPM_mLampUnit(   
      etl::message_router_id_t ciprouter,
      etl::message_router_id_t pulserouter,
      lampunit::cipshell::INTF_ActionMessagePort& i_amp):
      m_ActionMessagePort(i_amp), 
      m_Button {ciprouter, i_amp},
      m_Lamp {ciprouter, i_amp},
      m_eventrouter {
        pulserouter,
        m_Button,
        m_Lamp,
      }
    {
        TIME = 0;
        m_Button.Startup();
        m_Lamp.Startup();
    } // constructor
		
    /** event messages */
    /**
    * Triggers CIP Machine by input message Push (channel ButtonEvents).
    */
    void CIPM_mLampUnit::C1_Push ()
    {
      m_Button.receive(lampunit::cipmachine::mLampUnit_Inputs::Button_Push_Message());
      m_Button.publishOutpulses();
    } // C1_Push()
		
    /**
    * Triggers CIP Machine by input message Release (channel ButtonEvents).
    */
    void CIPM_mLampUnit::C1_Release ()
    {
      m_Button.receive(lampunit::cipmachine::mLampUnit_Inputs::Button_Release_Message());
      m_Button.publishOutpulses();
    } // C1_Release()
		
    /** extension functions */
    /** 
    * Triggers CIP Machine to increment time by one tick.
    */
    void CIPM_mLampUnit::TICK_()
    {
      TIME += 1;
      m_Lamp.getTimer().TICK_();           
    } 

    /** 
    * Triggers CIP Machine to execute one pending internal activation.
    *  Search order: CHAIN_, TIMEUP_, READ_
    */
    void CIPM_mLampUnit::STEP_()
    {
      if (hasCHAIN_())
      {
        CHAIN_();
      }
      else if (hasTIMEUP_())
      {
        TIMEUP_();
      }
      else if (hasAUTO_())
      {
        AUTO_();
      }
      else if (hasREAD_())
      {
        READ_();
      }
    } // STEP_()

    /** 
    * Triggers CIP Machine to execute one pending timeup activation.
    */
    void CIPM_mLampUnit::TIMEUP_()
    {
      if (m_Lamp.getTimer().hasTIMEUP_())
      {
        m_Lamp.getTimer().clearTIMEUP_();
        m_Lamp.receive(lampunit::cipmachine::mLampUnit_Inputs::Timeup_event());
        m_Lamp.publishOutpulses();
        return;
      }  
    } // TIMEUP_()

    /** 
    * Triggers CIP Machine to execute one pending chain activation.
    */
    void CIPM_mLampUnit::CHAIN_()
    {
    } // CHAIN_()
  
    /** 
    * Trigger CIP Machine to execute one internally buffered message.
    */
    void CIPM_mLampUnit::READ_()
    {
    } // READ_()

    /** 
    * Trigger CIP Machine to execute one AUTO_
    */
    void CIPM_mLampUnit::AUTO_()
    {
    } // AUTO_()

    /** 
    * Test if any local step activation is pending and return the result.
    * @return  if local step activation is pending.
    */
    bool CIPM_mLampUnit::hasSTEP_()
    {
      return  hasCHAIN_() || 
        hasTIMEUP_() || 
        hasAUTO_() || 
        hasREAD_();
    } // hasSTEP_()
        
    /** 
    * Test if a chain activation is pending and return the result.
    * @return  if a chain activation is pending.
    */
    bool CIPM_mLampUnit::hasCHAIN_()
    {
      return false;
    } // hasCHAIN_()
        
    /** 
    * Test if a timeup activation is pending and return the result.
    * @return  if a timeup activation is pending.
    */
    bool CIPM_mLampUnit::hasTIMEUP_()
    {
      if (m_Lamp.getTimer().hasTIMEUP_()) { return true; }  
      return false;
    } // hasTIMEUP_()
        
    /** 
    * Test if a read activation is pending and return the result.
    * @return  if a read activation is pending.
    */
    bool CIPM_mLampUnit::hasREAD_()
    {
      return false;
    } // hasREAD_()
      
    /** 
    * Test if an auto activation is pending and return the result.
    * @return  if a auto activation is pending.
    */
    bool CIPM_mLampUnit::hasAUTO_()
    {
      return false;
    } // hasAUTO_()

} // namespace lampunit::cipmachine

/* Actifsource ID=[cfa5934a-cf03-11ee-91c0-c5a9ed07c9d7,d37d50e5-fb29-11ee-88af-c1ff99c74ce0,d37d50a8-fb29-11ee-88af-c1ff99c74ce0,e83fa4af-fb29-11ee-88af-c1ff99c74ce0,d37d50e4-fb29-11ee-88af-c1ff99c74ce0,d37d50e3-fb29-11ee-88af-c1ff99c74ce0,Hash] */
