/*********************************************************************
	SYSTEM CIPLIBRARY
	cip read header file 
	Filename: CipRead.hpp
	generated by CIP Tool(R)
	activated code options:
		C++ code
*********************************************************************/

#if !defined(__CipRead__)
	#define __CipRead__


namespace ciplibrary
{
	
	/** 
	 * class CipRead
	 * element of cip read queue
	 * @template class T   Type of message data
	 * @template class E   Enum of read names
	 * @template class P   Process handling the message
	 */
	template<class T, class E, class P >
	class CipRead
	{
	public: 
		
		/** consructors / destructors */
		CipRead(void);
		CipRead(const CipRead&);
		~CipRead(void);
		
		/** trigger the process with READ_ */
		void READ_(void);
		
		/** member access functions */
		T* getData(void);
		E getName(void);
		void setName(E i_name);
		void setProcess(P* i_process);

	private: 
		
		/** prohibitted default functions */
		CipRead& operator=(const CipRead&);

		
		/** member variables */
		E m_name;
		T* m_data;
		P* m_process;

	}; // class CipRead

/*********************************************************************
*********************************************************************/

	
	/** consructors / destructors */
	template<class T, class E, class P >
	CipRead<T, E, P >::CipRead(void) : 
		m_data(new T), 
		m_process(0)
	{} // constructor()

	template<class T, class E, class P >
	CipRead<T, E, P >::CipRead(const CipRead<T, E, P >& i_object) : 
		m_name(i_object.m_name), 
		m_data(i_object.m_data), 
		m_process(i_object.m_process)
	{} // copy constructor()

	template<class T, class E, class P >
	CipRead<T, E, P >::~CipRead(void)
	{
		delete m_data;
	} // destructor()
	
	/** trigger the process with READ_ */
	template<class T, class E, class P >
	void CipRead<T, E, P >::READ_(void)
	{
		m_process->READ_();
	} // READ_()
	
	/** member access functions */
	template<class T, class E, class P >
	T* CipRead<T, E, P >::getData(void)
	{
		return m_data;
	} // getData()

	template<class T, class E, class P >
	E CipRead<T, E, P >::getName(void)
	{
		return m_name;
	} // getName()

	template<class T, class E, class P >
	void CipRead<T, E, P >::setName(E i_name)
	{
		m_name = i_name;
	} // setName()

	template<class T, class E, class P >
	void CipRead<T, E, P >::setProcess(P* i_process)
	{
		m_process = i_process;
	} // setProcess()


} // namespace ciplibrary

#endif // __CipRead__

/*********************************************************************
	End of cip read header
*********************************************************************/
/* Actifsource ID=[76a74f04-08ac-11e3-b902-17aaca85d2fd,a6d1b8c9-cedd-11de-80c2-87ac3b08f930,NRZN0Ui8H0jMPLsveuPYMXts0Ck=] */
