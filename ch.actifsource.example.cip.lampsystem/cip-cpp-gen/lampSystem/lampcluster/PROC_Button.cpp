/*********************************************************************
	SYSTEM LampSystem
	IMPLEMENTATION LampImpl_cpp
	cip process Button file for PROCESS Button
	Filename: PROC_Button.cpp
	generated by CIP Tool(R)
	
	activated code options:
		C++ code
		use message interface
	            naming option: channel  prefix
	        all types in shell
	        call context error function
	        'unsigned long' for delays
*********************************************************************/

#include "PROC_Button.hpp"

namespace lampunit
{

	namespace lampcluster
	{
        
		/** constructors / destructors */
	        PROC_Button::PROC_Button(
			const char * i_processString,     
			lampunit::cipshell::INTF_ActionMessagePort* i_amp,     
			ciplibrary::INTF_CipError<char >* i_ciperror) :     
				INTF_Button(i_processString),
				m_ActionMessagePort(i_amp),
				m_ciperror(i_ciperror),
				SELF(*this),
				Button(this) 
		{
			m_modeString = INTF_ButtonStrings::modeString(MODE);
			m_stateString = INTF_ButtonStrings::stateString(STATE);
			m_inputString = INTF_ButtonStrings::inputString(INTF_ButtonNames::_no_input_);
			m_outpulseString = INTF_ButtonStrings::outpulseString(INTF_ButtonNames::_no_outpulse_);
		}// constructor
		
		/** initialize the pointers to interaction processes */
		void PROC_Button::initInteraction(
			void* i_Button,
			void* i_Lamp)
		{
			STATUS = static_cast<INTF_Button* >(i_Button);
			Lamp = static_cast<INTF_Lamp*>(i_Lamp);
		} // initInteraction()
		
		/** INPORT EVENT_PORT */
		/**
		* Trigger the process with message C1_Push
		* @calls  ERR_CipError  if the message has not been processed
		*/
		void PROC_Button::C1_Push(void)
		{	
			m_inputString = INTF_ButtonStrings::inputString(INTF_ButtonNames::C1_Push);		
			switch(STATE)
			{
				case released:	
					STATE = pushed;
					m_stateString = INTF_ButtonStrings::stateString(STATE);
					m_outpulseString = INTF_ButtonStrings::outpulseString(INTF_ButtonNames::op_on);
					Lamp->BHV_on();     
				break;
			default:
				m_modeString = INTF_ButtonStrings::modeString(MODE);
				m_ciperror->call_ContextError(m_processString, m_modeString, m_stateString, m_inputString);
				break;
			}
			resetStrings();
		} // C1_Push()

		/**
		* Trigger the process with message C1_Release
		* @calls  ERR_CipError  if the message has not been processed
		*/
		void PROC_Button::C1_Release(void)
		{	
			m_inputString = INTF_ButtonStrings::inputString(INTF_ButtonNames::C1_Release);		
			switch(STATE)
			{
				case pushed:	
					STATE = released;
					m_stateString = INTF_ButtonStrings::stateString(STATE);
					m_outpulseString = INTF_ButtonStrings::outpulseString(INTF_ButtonNames::op_off);
					Lamp->BHV_off();     
				break;
			default:
				m_modeString = INTF_ButtonStrings::modeString(MODE);
				m_ciperror->call_ContextError(m_processString, m_modeString, m_stateString, m_inputString);
				break;
			}
			resetStrings();
		} // C1_Release()

	} // namespace lampcluster
} // namespace lampunit
/*********************************************************************
    End of cip process Button for PROCESS Button
*********************************************************************/
/* Actifsource ID=[1efc54ce-099f-11e3-b902-17aaca85d2fd,242979e4-b786-11ea-9e22-1112d6355503,7848c6d5-b785-11ea-9e22-1112d6355503,06ed7fd9-b786-11ea-9e22-1112d6355503,242979e3-b786-11ea-9e22-1112d6355503,242979e2-b786-11ea-9e22-1112d6355503,7848c70f-b785-11ea-9e22-1112d6355503,7848c6e8-b785-11ea-9e22-1112d6355503,k/BUTgCf1++uDEek9JZr/4Z3UrA=] */
