/*********************************************************************
	SYSTEM LampSystem
	IMPLEMENTATION LampImpl_cpp
	cip process Lamp header file for PROCESS Lamp
	Filename: PROC_Lamp.hpp
	generated by CIP Tool(R)
	
	activated code options:
		C++ code
		use message interface
	            naming option: channel  prefix
	        all types in shell
	        call context error function
	        'unsigned long' for delays
*********************************************************************/

#if !defined(__PROC_Lamp__)
    #define __PROC_Lamp__

#include "INTF_Lamp.hpp"
#include "INTF_ActionMessagePort.hpp"
#include "CIPS_sLampUnit.hpp"
#include "INTF_Constant.hpp"
#include "CipTimer.hpp"
#include "CipTimerQueue.hpp"
#include "INTF_CipError.hpp"
#include "INTF_LampNames.hpp"
#include "INTF_LampStrings.hpp"
#include "INTF_CommonNames.hpp"
#include "INTF_CommonStrings.hpp"

namespace lampunit
{

	namespace lampcluster
	{
	
		/** 
		* class PROC_Lamp
		* process Lamp class
		*/
		class PROC_Lamp : 
			public INTF_Lamp, 
			public INTF_LampNames, 
			public lampunit::cipshell::INTF_Constant
		{
		public: 
            
		/** constructors / destructors */
		PROC_Lamp(
			const char * i_processString,
			lampunit::cipshell::INTF_ActionMessagePort* i_amp,
			ciplibrary::INTF_CipError<char >* i_ciperror,
			ciplibrary::CipTimerQueue<cipmachine::PROC_CipProcess >* i_timerQueue);
            
		virtual ~PROC_Lamp(void){}
  
		/** initialize the pointers to interaction processes */
		void initInteraction(
			void* i_Lamp);
		/** extension input functions */
		/** 
		* Trigger the process with inpulse TIMEUP_.
		*/
		void TIMEUP_(void);
            

		/** pulse cast input functions */
		/** 
		* Trigger the process with inpulse off.
		*/
		void BHV_off(void);
            
		/** 
		* Trigger the process with inpulse on.
		*/
		void BHV_on(void);
            
		

	private: 

		/** timer functions */
		void setTimer(unsigned long i_delay);
		void stopTimer(void);
            
		/** prohibitted default functions */
		PROC_Lamp(const PROC_Lamp&);
		PROC_Lamp& operator=(const PROC_Lamp&);

		/** process member data */
		lampunit::cipshell::INTF_ActionMessagePort* m_ActionMessagePort; // action hadler for cip machine
		ciplibrary::INTF_CipError<char >* m_ciperror;
		PROC_Lamp& SELF; // own process instance cip macro for operations
		PROC_Lamp* Lamp; // own instance cip macro for inspections
		INTF_Lamp* STATUS; // status vector cip macro
		ciplibrary::CipTimer<cipmachine::PROC_CipProcess > m_timer; // process timer element
		ciplibrary::CipTimerQueue<cipmachine::PROC_CipProcess >* m_timerQueue; // timer queueu of cip machine
		}; // class PROC_Lamp

	} // namespace lampcluster
} // namespace lampunit

#endif // __PROC_Lamp__

/*********************************************************************
    End of cip process Lamp header for PROCESS Lamp
*********************************************************************/
/* Actifsource ID=[45d0d2b1-099f-11e3-b902-17aaca85d2fd,242979e4-b786-11ea-9e22-1112d6355503,7848c6d5-b785-11ea-9e22-1112d6355503,06ed7fd9-b786-11ea-9e22-1112d6355503,242979e3-b786-11ea-9e22-1112d6355503,242979e2-b786-11ea-9e22-1112d6355503,7848c70f-b785-11ea-9e22-1112d6355503,7848c705-b785-11ea-9e22-1112d6355503,DisRerQxCU2zui1VV09ZIfM7Rhs=] */
