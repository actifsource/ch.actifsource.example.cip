/*********************************************************************
	SYSTEM CIPLIBRARY
	cip timer header file 
	Filename: CipTimer.hpp
	generated by CIP Tool(R)
	activated code options:
		C++ code
*********************************************************************/

#if !defined(__CipTimer__)
	#define __CipTimer__


namespace ciplibrary
{
	
	/** 
	 * class CipTimer
	 * timer element for timer queue
	 */
	
	template<class P >
	class CipTimer
	{
	public: 
		
		/** consructors / destructors */
		explicit CipTimer(P* i_process);
		CipTimer(void){}
		virtual ~CipTimer(void){}
		
		/** store the remaining delay. */
		void setDelay(unsigned long i_delay);
		
		/** store the remaining delay for restart. */
		void setRestartDelay(unsigned long i_delay);
		
		/** trigger the process with TIMEUP_ */
		void TIMEUP_(void);
		
		/** get the next CipTimer element in the queue. */
		CipTimer*& getNext(void) { return m_next; }

		
		/** return the remaining delay. */
		unsigned long getDelay(void) const;
		
		/** return the remaining delay for restart. */
		unsigned long getRestartDelay(void) const;
		
		/** decrease the remaining delay by the given delay value. */
		void decreaseDelay(unsigned long i_delay);
		
		/** decrease the remaining delay for restart by the given delay value. */
		void decreaseRestartDelay(unsigned long i_delay);
		
		/** decrement the remaining delay (by 1). */
		void decrementDelay(void);
		
		/** decrement the remaining delay for restart (by 1). */
		void decrementRestartDelay(void);

	private: 
		
		/** prohibitted default functions */
		CipTimer& operator=(const CipTimer&);

		
		/** member variables */
		CipTimer* m_next;
		P* m_process;
		unsigned long m_delay;
		unsigned long m_restart_delay;

	}; // class CipTimer

/*********************************************************************
*********************************************************************/

	
	/** consructors / destructors */
	template<class P >
	CipTimer<P >::CipTimer(P* i_process)  : 
		m_next(0), 
		m_process(i_process), 
		m_delay(0), 
		m_restart_delay(0)
	{} // constructor()
	
	/** store the remaining delay. */
	template<class P >
	void CipTimer<P >::setDelay(unsigned long i_delay)
	{
		if (i_delay < 0)
		{
			m_delay = 0;
		}
		else 
		{
			m_delay = i_delay;
		}
	} // setDelay()
	
	/** store the remaining delay for restart. */
	template<class P >
	void CipTimer<P >::setRestartDelay(unsigned long i_delay)
	{
		if (i_delay < 0)
		{
			m_restart_delay = 0;
		}
		else 
		{
			m_restart_delay = i_delay;
		}
	} // setRestartDelay()
	
	/** trigger the process with TIMEUP_ */
	template<class P >
	void CipTimer<P >::TIMEUP_(void)
	{
		m_process->TIMEUP_();
	} // TIMEUP_()
	
	/** return the remaining delay. */
	template<class P >
	unsigned long CipTimer<P >::getDelay(void) const
	{
		return m_delay;
	} // getDelay()
	
	/** return the remaining delay for restart. */
	template<class P >
	unsigned long CipTimer<P >::getRestartDelay(void) const
	{
		return m_restart_delay;
	} // getRestartDelay()
	
	/** decrease the remaining delay by the given delay value. */
	template<class P >
	void CipTimer<P >::decreaseDelay(unsigned long i_delay)
	{
		m_delay -= i_delay;
	} // decreaseDelay()
	
	/** decrease the remaining delay for restart by the given delay value. */
	template<class P >
	void CipTimer<P >::decreaseRestartDelay(unsigned long i_delay)
	{
		m_restart_delay -= i_delay;
	} // decreaseRestartDelay()
	
	/** decrement the remaining delay (by 1). */
	template<class P >
	void CipTimer<P >::decrementDelay(void)
	{
		m_delay -= 1;
	} // decrementDelay()
	
	/** decrement the remaining delay for restart (by 1). */
	template<class P >
	void CipTimer<P >::decrementRestartDelay(void)
	{
		m_restart_delay -= 1;
	} // decrementRestartDelay()

} // namespace ciplibrary

#endif // __CipTimer__

/*********************************************************************
	End of cip timer header
*********************************************************************/
/* Actifsource ID=[c3fa897b-08ac-11e3-b902-17aaca85d2fd,a6d1b8c9-cedd-11de-80c2-87ac3b08f930,EYTLed75gG7ONcE7aCQpI6sAqO4=] */
