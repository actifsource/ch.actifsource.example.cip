/*********************************************************************
	SYSTEM TemplateSystem
	IMPLEMENTATION Template_cpp
	cip process ProcessFinalA header file for PROCESS ProcessFinalA
	Filename: PROC_ProcessFinalA.hpp
	generated by CIP Tool(R)
	
	activated code options:
		C++ code
		use message interface
	            naming option: channel  prefix
	        all types in shell
	        enable mode inspection
	        'unsigned long' for delays
*********************************************************************/

#if !defined(__PROC_ProcessFinalA__)
    #define __PROC_ProcessFinalA__

#include "INTF_ProcessFinalA.hpp"
#include "INTF_ActionMessagePort.hpp"
#include "CIPS_sTemplateUnit.hpp"
#include "INTF_Constant.hpp"
#include "CipChain.hpp"
#include "CipChainQueue.hpp"
#include "INTF_ProcessFinalANames.hpp"
#include "INTF_ProcessE.hpp"

namespace templateunit
{

	namespace clustera
	{
	
		/** 
		* class PROC_ProcessFinalA
		* process ProcessFinalA class
		*/
		class PROC_ProcessFinalA : 
			public INTF_ProcessFinalA, 
			public INTF_ProcessFinalANames, 
			public templateunit::cipshell::INTF_Constant
		{
		public: 
            
		/** constructors / destructors */
		PROC_ProcessFinalA(
			templateunit::cipshell::INTF_ActionMessagePort* i_amp,
			ciplibrary::CipChainQueue<cipmachine::PROC_CipProcess >* i_chainQueue);
            
		virtual ~PROC_ProcessFinalA(void){}
  
		/** initialize the pointers to interaction processes */
		void initInteraction(
			void* i_ProcessFinalA,
			void* i_ProcessE);
		/** extension input functions */
		/** 
		* Trigger the process with inpulse CHAIN_.
		*/
		void CHAIN_(void);
            

		/** pulse cast input functions */
		/** 
		* Trigger the process with inpulse InpulseA.
		*/
		void BHV_InpulseA(void);
            
		

	private: 

		/** chain functions */
		void setChain(void);
            
		/** FUNCTION FunctionA */
		void FunctionA(void);

		/** prohibitted default functions */
		PROC_ProcessFinalA(const PROC_ProcessFinalA&);
		PROC_ProcessFinalA& operator=(const PROC_ProcessFinalA&);

		/** process member data */
		templateunit::cipshell::INTF_ActionMessagePort* m_ActionMessagePort; // action hadler for cip machine
		PROC_ProcessFinalA& SELF; // own process instance cip macro for operations
		PROC_ProcessFinalA* ProcessFinalA; // own instance cip macro for inspections
		INTF_ProcessFinalA* STATUS; // status vector cip macro
		INTF_ProcessE* ProcessE; // process vector for pulse cast and inspections
		ciplibrary::CipChain<cipmachine::PROC_CipProcess > m_chain; // process chain element
		ciplibrary::CipChainQueue<cipmachine::PROC_CipProcess >* m_chainQueue; // chain queue of cip machine

		/** local process variables */
		int VariableA;
		
		}; // class PROC_ProcessFinalA

	} // namespace clustera
} // namespace templateunit

#endif // __PROC_ProcessFinalA__

/*********************************************************************
    End of cip process ProcessFinalA header for PROCESS ProcessFinalA
*********************************************************************/
/* Actifsource ID=[45d0d2b1-099f-11e3-b902-17aaca85d2fd,7270396a-9b54-11ef-800e-630ffd8f1eac,726fc458-9b54-11ef-800e-630ffd8f1eac,7270398d-9b54-11ef-800e-630ffd8f1eac,72703969-9b54-11ef-800e-630ffd8f1eac,72703968-9b54-11ef-800e-630ffd8f1eac,72701230-9b54-11ef-800e-630ffd8f1eac,7270120b-9b54-11ef-800e-630ffd8f1eac,/vsfe6+ekelbNUIOJf/pNYnsge0=] */
