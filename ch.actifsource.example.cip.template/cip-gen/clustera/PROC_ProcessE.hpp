/*********************************************************************
	SYSTEM TemplateSystem
	IMPLEMENTATION Template_cpp
	cip process ProcessE header file for PROCESS ProcessE
	Filename: PROC_ProcessE.hpp
	generated by CIP Tool(R)
	
	activated code options:
		C++ code
		use message interface
	            naming option: channel  prefix
	        all types in shell
	        enable mode inspection
	        'unsigned long' for delays
*********************************************************************/

#if !defined(__PROC_ProcessE__)
    #define __PROC_ProcessE__

#include "INTF_ProcessE.hpp"
#include "INTF_ActionMessagePort.hpp"
#include "CIPS_sTemplateUnit.hpp"
#include "INTF_Constant.hpp"
#include "CipChain.hpp"
#include "CipChainQueue.hpp"
#include "CipAuto.hpp"
#include "CipAutoQueue.hpp"
#include "INTF_ProcessENames.hpp"
#include "INTF_ProcessBB.hpp"

namespace templateunit
{

	namespace clustera
	{
	
		/** 
		* class PROC_ProcessE
		* process ProcessE class
		*/
		class PROC_ProcessE : 
			public INTF_ProcessE, 
			public INTF_ProcessENames, 
			public templateunit::cipshell::INTF_Constant
		{
		public: 
            
		/** constructors / destructors */
		PROC_ProcessE(
			templateunit::cipshell::INTF_ActionMessagePort* i_amp,
			ciplibrary::CipChainQueue<cipmachine::PROC_CipProcess >* i_chainQueue,
			ciplibrary::CipAutoQueue<cipmachine::PROC_CipProcess >* i_autoQueue);
            
		virtual ~PROC_ProcessE(void){}
  
		/** initialize the pointers to interaction processes */
		void initInteraction(
			void* i_ProcessE,
			void* i_ProcessBB);
		/** extension input functions */
		/** 
		* Trigger the process with inpulse CHAIN_.
		*/
		void CHAIN_(void);
            
		/** 
		* Trigger the process with message AUTO_
		*/
		void AUTO_(void);
            

		/** pulse cast input functions */
		/** 
		* Trigger the process with inpulse InpulseE.
		*/
		void BHV_InpulseE(void);
            
		/** Master and gate inspection access functions */
		/** 
		* return the current state of the process
		*/
		INTF_ProcessENames::E_State getState(void) const;
		

	private: 

		/** chain functions */
		void setChain(void);
            
		/** auto functions */
		void setAuto(void);
		void clearAuto(void);
            
		/** prohibitted default functions */
		PROC_ProcessE(const PROC_ProcessE&);
		PROC_ProcessE& operator=(const PROC_ProcessE&);

		/** process member data */
		templateunit::cipshell::INTF_ActionMessagePort* m_ActionMessagePort; // action hadler for cip machine
		PROC_ProcessE& SELF; // own process instance cip macro for operations
		PROC_ProcessE* ProcessE; // own instance cip macro for inspections
		INTF_ProcessE* STATUS; // status vector cip macro
		INTF_ProcessBB* ProcessBB; // process vector for pulse cast and inspections
		ciplibrary::CipChain<cipmachine::PROC_CipProcess > m_chain; // process chain element
		ciplibrary::CipChainQueue<cipmachine::PROC_CipProcess >* m_chainQueue; // chain queue of cip machine
		ciplibrary::CipAuto<cipmachine::PROC_CipProcess > m_auto; // process auto element
		ciplibrary::CipAutoQueue<cipmachine::PROC_CipProcess >* m_autoQueue; // auto queue of cip machine
		}; // class PROC_ProcessE

	} // namespace clustera
} // namespace templateunit

#endif // __PROC_ProcessE__

/*********************************************************************
    End of cip process ProcessE header for PROCESS ProcessE
*********************************************************************/
/* Actifsource ID=[45d0d2b1-099f-11e3-b902-17aaca85d2fd,7270396a-9b54-11ef-800e-630ffd8f1eac,726fc458-9b54-11ef-800e-630ffd8f1eac,7270398d-9b54-11ef-800e-630ffd8f1eac,72703969-9b54-11ef-800e-630ffd8f1eac,72703968-9b54-11ef-800e-630ffd8f1eac,72701230-9b54-11ef-800e-630ffd8f1eac,7270120a-9b54-11ef-800e-630ffd8f1eac,JljY4gEfTEjyStF8nu0W3qOPePI=] */
