/*********************************************************************
	SYSTEM TemplateSystem
	IMPLEMENTATION Template_cpp
	cip process ProcessBB file for PROCESS ProcessBB
	Filename: PROC_ProcessBB.cpp
	generated by CIP Tool(R)
	
	activated code options:
		C++ code
		use message interface
	            naming option: channel  prefix
	        all types in shell
	        enable mode inspection
	        'unsigned long' for delays
*********************************************************************/

#include "PROC_ProcessBB.hpp"

namespace templateunit
{

	namespace clustera
	{
        
		/** constructors / destructors */
	        PROC_ProcessBB::PROC_ProcessBB(
			templateunit::cipshell::INTF_ActionMessagePort* i_amp,     
			ciplibrary::CipTimerQueue<cipmachine::PROC_CipProcess >* i_timerQueue,     
			ciplibrary::CipChainQueue<cipmachine::PROC_CipProcess >* i_chainQueue) :     
				INTF_ProcessBB(),
				m_ActionMessagePort(i_amp),
				SELF(*this),
				ProcessBB(this) ,
				m_timer(ciplibrary::CipTimer<cipmachine::PROC_CipProcess >(this)),
				m_timerQueue(i_timerQueue),
				m_chain(ciplibrary::CipChain<cipmachine::PROC_CipProcess >(this)),
				m_chainQueue(i_chainQueue)
		{}// constructor		
		
		/** initialize the pointers to interaction processes */
		void PROC_ProcessBB::initInteraction(
			void* i_ProcessBB,
			void* i_ProcessE,
			void* i_ProcessFinalA)
		{
			STATUS = static_cast<INTF_ProcessBB* >(i_ProcessBB);
			ProcessE = static_cast<INTF_ProcessE*>(i_ProcessE);
			ProcessFinalA = static_cast<INTF_ProcessFinalA*>(i_ProcessFinalA);
		} // initInteraction()
		
		/** startup the entry function from the process */
		void PROC_ProcessBB::startup(void)
		{
			triggerStateAction(EntryAction, _no_state_);
		} // startup
		
		#define GateA() TRTAB_GateA \
	            [ProcessE->getState()-1] 
		#define GateB() TRTAB_GateB \
	            [ProcessE->getState()-1] 
		
		/** INPORT InportA */
		/**
		* Trigger the process with message C1_msgA
		*/
		void PROC_ProcessBB::C1_msgA(void)
		{	
			switch(STATE)
			{
				case SuperStateA_1:	
					/* [[7270873d-9b54-11ef-800e-630ffd8f1eac,Transition]] */
					printf("       TRANSITION '104 msgA' ProcessBB.normalA: STATE SuperStateA_1 -> StateA_2  [7270873d-9b54-11ef-800e-630ffd8f1eac]\n");
					/* OPERATIONS before writing */
					/* OperationA[[72705fe5-9b54-11ef-800e-630ffd8f1eac,Operation]] */
					{printf("OperationA");}
					STATE = StateA_2;
					setTimer(55);    //  DELAY 55
					ProcessFinalA->BHV_InpulseA();     
				break;
				case SuperStateA_2:	
					/* [[727039a4-9b54-11ef-800e-630ffd8f1eac,Transition]] */
					printf("       TRANSITION '2 msgA' ProcessBB.normalA: STATE SuperStateA_2 -> StateA_1  [727039a4-9b54-11ef-800e-630ffd8f1eac]\n");
					STATE = StateA_1;
					/* Entry functions */
					triggerStateAction(EntryAction, _no_state_);
				break;
				case StateA_1:
					STATE = SuperStateA_1;
					TEMP_STATE = StateA_1;
					C1_msgA();
				break;
				case StateA_2:
					STATE = SuperStateA_2;
					TEMP_STATE = StateA_2;
					C1_msgA();
				break;
				case StateB:
					STATE = SuperStateB_2;
					TEMP_STATE = StateB;
					C1_msgA();
				break;
				case StateBB:
					STATE = SuperStateB_1;
					TEMP_STATE = StateBB;
					C1_msgA();
				break;
				case StateC_1:
					STATE = SuperStateC_1;
					TEMP_STATE = StateC_1;
					C1_msgA();
				break;
				case StateC_2:
					STATE = SuperStateC_2;
					TEMP_STATE = StateC_2;
					C1_msgA();
				break;
				case SuperStateB_1:
					STATE = SuperStateA_1;
					C1_msgA();
				break;
				case SuperStateB_2:
					STATE = SuperStateA_2;
					C1_msgA();
				break;
				case SuperStateC_1:
					STATE = SuperStateB_1;
					C1_msgA();
				break;
				case SuperStateC_2:
					STATE = SuperStateB_2;
					C1_msgA();
				break;
			default:
				break;
			}
		} // C1_msgA()

		/**
		* Trigger the process with message C1_msgB
		*/
		void PROC_ProcessBB::C1_msgB(void)
		{	
			switch(STATE)
			{
				case SuperStateA_1:	
					{
						/* [[7270602b-9b54-11ef-800e-630ffd8f1eac,Transition]] */
						printf("       TRANSITION '102 msgB' ProcessBB.normalA: STATE SuperStateA_1 -> StateB  [7270602b-9b54-11ef-800e-630ffd8f1eac]\n");
						/* OPERATIONS before writing */
						/* OperationB[[72706020-9b54-11ef-800e-630ffd8f1eac,Operation]] */
						{printf("OperationB"); }
						STATE = StateB;
					}
				break;
				case StateA_1:
					STATE = SuperStateA_1;
					TEMP_STATE = StateA_1;
					C1_msgB();
				break;
				case StateBB:
					STATE = SuperStateB_1;
					TEMP_STATE = StateBB;
					C1_msgB();
				break;
				case StateC_1:
					STATE = SuperStateC_1;
					TEMP_STATE = StateC_1;
					C1_msgB();
				break;
				case SuperStateB_1:
					STATE = SuperStateA_1;
					C1_msgB();
				break;
				case SuperStateC_1:
					STATE = SuperStateB_1;
					C1_msgB();
				break;
			default:
				break;
			}
		} // C1_msgB()

		/** extension input functions */
		/**
		 * Trigger the process with inpulse CHAIN_.
		 */
		void PROC_ProcessBB::CHAIN_(void)
	        {	      
			switch(STATE)
			{
				case StateA_1:	
					/* [[7270399f-9b54-11ef-800e-630ffd8f1eac,Transition]] */
					printf("       TRANSITION '11113 CHAIN_' ProcessBB.normalA: STATE StateA_1 -> StateA_1  [7270399f-9b54-11ef-800e-630ffd8f1eac]\n");
					STATE = StateA_1;
				break;
				case SuperStateA_1:	
					/* [[7270602c-9b54-11ef-800e-630ffd8f1eac,Transition]] */
					printf("       TRANSITION '103 CHAIN_' ProcessBB.normalA: STATE SuperStateA_1 -> StateA_2  [7270602c-9b54-11ef-800e-630ffd8f1eac]\n");
					STATE = StateA_2;
						m_ActionMessagePort->f_C2_msgA();                                                        
				break;
				case StateBB:
					STATE = SuperStateB_1;
					TEMP_STATE = StateBB;
					CHAIN_();
				break;
				case StateC_1:
					STATE = SuperStateC_1;
					TEMP_STATE = StateC_1;
					CHAIN_();
				break;
				case SuperStateB_1:
					STATE = SuperStateA_1;
					CHAIN_();
				break;
				case SuperStateC_1:
					STATE = SuperStateB_1;
					CHAIN_();
				break;
			default:
				break;
			} 		
		} // CHAIN_()
	
		/**
		 * Trigger the process with inpulse TIMEUP_.
		 */
		void PROC_ProcessBB::TIMEUP_(void)
		{
			return;
		} // TIMEUP_()
	        
	 	/** 
		 * Trigger the process with inpulse InpulseA.
		 */
		void PROC_ProcessBB::BHV_InpulseA(void)
		{ 
			switch(STATE)
			{
				case SuperStateA_2:
					/* [[72708749-9b54-11ef-800e-630ffd8f1eac,Transition]] */
					printf("       TRANSITION '105 InpulseA' ProcessBB.normalA: STATE SuperStateA_2 -> StateBB  [72708749-9b54-11ef-800e-630ffd8f1eac]\n");
					STATE = StateBB;
					/* Entry functions */
					triggerStateAction(EntryAction, _no_state_);
				break;
				case StateA_2:
					STATE = SuperStateA_2;
					TEMP_STATE = StateA_2;
					BHV_InpulseA();
				break;
				case SuperStateB_2:
					STATE = SuperStateA_2;
					BHV_InpulseA();
				break;
				case StateB:
					STATE = SuperStateB_2;
					TEMP_STATE = StateB;
					BHV_InpulseA();
				break;
				case SuperStateC_2:
					STATE = SuperStateB_2;
					BHV_InpulseA();
				break;
				case StateC_2:
					STATE = SuperStateC_2;
					TEMP_STATE = StateC_2;
					BHV_InpulseA();
				break;
			default:
				break;
			}     		
		} // BHV_InpulseA()
	
	 	/** 
		 * Trigger the process with inpulse TestInpulseB.
		 */
		void PROC_ProcessBB::BHV_TestInpulseB(void)
		{ 
			return;
		} // BHV_TestInpulseB()
	
		/**
		 * Trigger the process with state functions.
		 */
		void PROC_ProcessBB::triggerStateAction(INTF_ProcessBBNames::E_StateAction stateAction, INTF_ProcessBBNames::E_State baseState)
		{
			switch(stateAction)
			{
			case EntryAction:
				switch(STATE)
				{
					case SuperStateA_1:
						/* [[727039a2-9b54-11ef-800e-630ffd8f1eac,EntryTransition]] */
						printf("       TRANSITION '4 ENTRY_' ProcessBB.normalA: STATE SuperStateA_1   [727039a2-9b54-11ef-800e-630ffd8f1eac]\n");
						setChain();                  
					break;
					case StateA_1:
						if (baseState != SuperStateA_1)
						{
							STATE = SuperStateA_1;
							triggerStateAction(stateAction, baseState);
							STATE = StateA_1;
						}
						break;
					case SuperStateB_1:
						if (baseState != SuperStateA_1)
						{
							STATE = SuperStateA_1;
							triggerStateAction(stateAction, baseState);
							STATE = SuperStateB_1;
						}
						break;
					case StateBB:
						if (baseState != SuperStateB_1)
						{
							STATE = SuperStateB_1;
							triggerStateAction(stateAction, baseState);
							STATE = StateBB;
						}
						break;
					case SuperStateC_1:
						if (baseState != SuperStateB_1)
						{
							STATE = SuperStateB_1;
							triggerStateAction(stateAction, baseState);
							STATE = SuperStateC_1;
						}
						break;
					case StateC_1:
						if (baseState != SuperStateC_1)
						{
							STATE = SuperStateC_1;
							triggerStateAction(stateAction, baseState);
							STATE = StateC_1;
						}
						break;
				default:
					return;
				}
			break;
			case ExitAction:
			break;
			default:
				break;
			}
		} // triggerStateAction()
		
		/** inquiry function InquiryA */
		void PROC_ProcessBB::InquiryA(void)
		{ }    
	       	
		/** inquiry function InquiryB */
		void PROC_ProcessBB::InquiryB(void)
		{ }    
	       	
		/** extension functions */
		void PROC_ProcessBB::setTimer(unsigned long i_delay)
		{
			stopTimer();
			m_timer.setDelay(i_delay);
			m_timerQueue->setTimer(&m_timer);
		}
	
		void PROC_ProcessBB::stopTimer(void)
		{
			m_timerQueue->stopTimer(&m_timer);
		}
	        
		void PROC_ProcessBB::setChain(void)
		{
			m_chainQueue->setChain(&m_chain);
		}
	        
		/** FUNCTION FunctionA */
 		void PROC_ProcessBB::FunctionA(void)
		{ }
	
		/** FUNCTION FunctionB */
 		void PROC_ProcessBB::FunctionB(void)
		{ }
	
		/** static gate truth tables */
	        
		const bool PROC_ProcessBB::TRTAB_GateA[2] = // [ProcessE states]
			{true, true};
			
		const bool PROC_ProcessBB::TRTAB_GateB[2] = // [ProcessE states]
			{true, true};
			
	} // namespace clustera
} // namespace templateunit
/*********************************************************************
    End of cip process ProcessBB for PROCESS ProcessBB
*********************************************************************/
/* Actifsource ID=[1efc54ce-099f-11e3-b902-17aaca85d2fd,7270396a-9b54-11ef-800e-630ffd8f1eac,726fc458-9b54-11ef-800e-630ffd8f1eac,7270398d-9b54-11ef-800e-630ffd8f1eac,72703969-9b54-11ef-800e-630ffd8f1eac,72703968-9b54-11ef-800e-630ffd8f1eac,72701230-9b54-11ef-800e-630ffd8f1eac,727011f8-9b54-11ef-800e-630ffd8f1eac,Qib+0tTvLs88ziCSBHjjhKqiOP0=] */
