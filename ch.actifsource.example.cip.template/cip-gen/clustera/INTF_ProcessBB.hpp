/*********************************************************************
	SYSTEM TemplateSystem
	IMPLEMENTATION Template_cpp
	cip process ProcessBB interface header file for PROCESS ProcessBB
	Filename: INTF_ProcessBB.hpp
	generated by CIP Tool(R)
	
	activated code options:
		C++ code
		use message interface
	            naming option: channel  prefix
	        all types in shell
	        enable mode inspection
	        'unsigned long' for delays
*********************************************************************/

#if !defined(__INTF_ProcessBB__)
    #define __INTF_ProcessBB__


#include "PROC_CipProcess.hpp"
#include "INTF_ProcessBBNames.hpp"

namespace templateunit
{
    
	namespace clustera
	{
        
		/** 
		* class INTF_ProcessBB
		* interface for process ProcessBB
		*/
		class INTF_ProcessBB : 
			public cipmachine::PROC_CipProcess
		{
		friend class PROC_ProcessBB;
	public: 
            
		/** constructors / destructors */
		INTF_ProcessBB(void) :
			cipmachine::PROC_CipProcess(),
			STATE(INTF_ProcessBBNames::StateA_1),
			TEMP_STATE(INTF_ProcessBBNames::StateA_1),
			MODE(INTF_ProcessBBNames::normalA)
		{}

		virtual ~INTF_ProcessBB(void){}

		/** initialize the pointers to interaction processes */
		virtual void initInteraction(  
			void* i_ProcessBB,
			void* i_ProcessE,
			void* i_ProcessFinalA) = 0;
		
		/** startup the entry function from the process */	
		virtual void startup(void) = 0;

		/** INPORT EVENT_PORT */
		/** 
		* Trigger the process with message C1_msgB
		*/
		virtual void C1_msgB(void) = 0;
		
		/** 
		* Trigger the process with message C1_msgA
		*/
		virtual void C1_msgA(void) = 0;
		
		/** extension input functions */
		/** 
		* Trigger the process with inpulse CHAIN_.
		*/
		virtual void CHAIN_(void) = 0;
		
		/** 
		* Trigger the process with inpulse TIMEUP_.
		*/
		virtual void TIMEUP_(void) = 0;
		
		/** pulse cast input functions */
		/** 
		* Trigger the process with inpulse InpulseA.
		*/
		virtual void BHV_InpulseA(void) = 0;
            
		/** 
		* Trigger the process with inpulse TestInpulseB.
		*/
		virtual void BHV_TestInpulseB(void) = 0;
            
		/** inquiry function InquiryB */
		virtual void InquiryB (void) = 0;

		/** inquiry function InquiryA */
		virtual void InquiryA (void) = 0;

	    
	protected: 
 
		/** status variables */

		INTF_ProcessBBNames::E_State STATE;
		INTF_ProcessBBNames::E_State TEMP_STATE;
		INTF_ProcessBBNames::E_Mode MODE;

	private: 
            
		/** prohibitted default functions */
		INTF_ProcessBB(const INTF_ProcessBB&);
		INTF_ProcessBB& operator=(const INTF_ProcessBB&);

        }; // class INTF_ProcessBB

    } // namespace clustera
} // namespace templateunit

#endif // __INTF_ProcessBB__

/*********************************************************************
    End of cip process ProcessBB interface header for PROCESS ProcessBB
*********************************************************************/
/* Actifsource ID=[e2fd58fb-0973-11e3-b902-17aaca85d2fd,7270396a-9b54-11ef-800e-630ffd8f1eac,726fc458-9b54-11ef-800e-630ffd8f1eac,7270398d-9b54-11ef-800e-630ffd8f1eac,72703969-9b54-11ef-800e-630ffd8f1eac,72703968-9b54-11ef-800e-630ffd8f1eac,72701230-9b54-11ef-800e-630ffd8f1eac,727011f8-9b54-11ef-800e-630ffd8f1eac,A/ol/faIeCCMcX6ubusoE3DZcx8=] */
