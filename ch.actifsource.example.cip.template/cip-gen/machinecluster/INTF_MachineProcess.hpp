/*********************************************************************
	SYSTEM TemplateSystem
	IMPLEMENTATION Template_cpp
	cip process MachineProcess interface header file for PROCESS MachineProcess
	Filename: INTF_MachineProcess.hpp
	generated by CIP Tool(R)
	
	activated code options:
		C++ code
		use message interface
	            naming option: channel  prefix
	        all types in shell
	        enable mode inspection
	        'unsigned long' for delays
*********************************************************************/

#if !defined(__INTF_MachineProcess__)
    #define __INTF_MachineProcess__


#include "PROC_CipProcess.hpp"
#include "INTF_MachineProcessNames.hpp"

namespace templateunit
{
    
	namespace machinecluster
	{
        
		/** 
		* class INTF_MachineProcess
		* interface for process MachineProcess
		*/
		class INTF_MachineProcess : 
			public cipmachine::PROC_CipProcess
		{
		friend class PROC_MachineProcess;
	public: 
            
		/** constructors / destructors */
		INTF_MachineProcess(void) :
			cipmachine::PROC_CipProcess(),
			STATE(INTF_MachineProcessNames::Idle),
			TEMP_STATE(INTF_MachineProcessNames::Idle),
			MODE(INTF_MachineProcessNames::normalA)
		{}

		virtual ~INTF_MachineProcess(void){}

		/** initialize the pointers to interaction processes */
		virtual void initInteraction(  
			void* i_MachineProcess) = 0;
		
		/** startup the entry function from the process */	
		virtual void startup(void) = 0;

		/** INPORT EVENT_PORT */
		/** 
		* Trigger the process with message C1_nextWorkload
		*/
		virtual void C1_nextWorkload(void) = 0;
		
		/** 
		* Trigger the process with message C1_doMachineStuff
		*/
		virtual void C1_doMachineStuff(void) = 0;
		
		/** 
		* Trigger the process with message C1_powerOn
		*/
		virtual void C1_powerOn(void) = 0;
		
		/** 
		* Trigger the process with message C1_powerFail
		*/
		virtual void C1_powerFail(void) = 0;
		
		/** 
		* Trigger the process with message C1_powerOff
		*/
		virtual void C1_powerOff(void) = 0;
		
		/** pulse cast input functions */
		/** 
		* Trigger the process with inpulse InpulseA.
		*/
		virtual void BHV_InpulseA(void) = 0;
            
		/** 
		* Trigger the process with inpulse TestInpulseB.
		*/
		virtual void BHV_TestInpulseB(void) = 0;
            
		/** inquiry function InquiryB */
		virtual void InquiryB (void) = 0;

	    
	protected: 
 
		/** status variables */

		INTF_MachineProcessNames::E_State STATE;
		INTF_MachineProcessNames::E_State TEMP_STATE;
		INTF_MachineProcessNames::E_Mode MODE;

	private: 
            
		/** prohibitted default functions */
		INTF_MachineProcess(const INTF_MachineProcess&);
		INTF_MachineProcess& operator=(const INTF_MachineProcess&);

        }; // class INTF_MachineProcess

    } // namespace machinecluster
} // namespace templateunit

#endif // __INTF_MachineProcess__

/*********************************************************************
    End of cip process MachineProcess interface header for PROCESS MachineProcess
*********************************************************************/
/* Actifsource ID=[e2fd58fb-0973-11e3-b902-17aaca85d2fd,7270396a-9b54-11ef-800e-630ffd8f1eac,726fc458-9b54-11ef-800e-630ffd8f1eac,7270398d-9b54-11ef-800e-630ffd8f1eac,72703969-9b54-11ef-800e-630ffd8f1eac,72703968-9b54-11ef-800e-630ffd8f1eac,72701230-9b54-11ef-800e-630ffd8f1eac,727011f8-9b54-11ef-800e-630ffd8f1eac,D/0BfYjwDmgol3r8/FDGkpF8VUk=] */
