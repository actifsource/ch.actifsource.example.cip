/*********************************************************************
	SYSTEM TemplateSystem
	IMPLEMENTATION Template_cpp
	cip process MachineProcess header file for PROCESS MachineProcess
	Filename: PROC_MachineProcess.hpp
	generated by CIP Tool(R)
	
	activated code options:
		C++ code
		use message interface
	            naming option: channel  prefix
	        all types in shell
	        enable mode inspection
	        'unsigned long' for delays
*********************************************************************/

#if !defined(__PROC_MachineProcess__)
    #define __PROC_MachineProcess__

#include "INTF_MachineProcess.hpp"
#include "INTF_ActionMessagePort.hpp"
#include "CIPS_sTemplateUnit.hpp"
#include "INTF_Constant.hpp"
#include "INTF_MachineProcessNames.hpp"

namespace templateunit
{

	namespace machinecluster
	{
	
		/** 
		* class PROC_MachineProcess
		* process MachineProcess class
		*/
		class PROC_MachineProcess : 
			public INTF_MachineProcess, 
			public INTF_MachineProcessNames, 
			public templateunit::cipshell::INTF_Constant
		{
		public: 
            
		/** constructors / destructors */
		PROC_MachineProcess(
			templateunit::cipshell::INTF_ActionMessagePort* i_amp);
            
		virtual ~PROC_MachineProcess(void){}
  
		/** initialize the pointers to interaction processes */
		void initInteraction(
			void* i_MachineProcess);
		
		/** startup the entry function from the process */	
		void startup(void);

		/** INPORT EVENT_PORT */
		/** 
		* Trigger the process with message C1_nextWorkload
		*/
		void C1_nextWorkload(void);
            
		/** 
		* Trigger the process with message C1_doMachineStuff
		*/
		void C1_doMachineStuff(void);
            
		/** 
		* Trigger the process with message C1_powerOn
		*/
		void C1_powerOn(void);
            
		/** 
		* Trigger the process with message C1_powerFail
		*/
		void C1_powerFail(void);
            
		/** 
		* Trigger the process with message C1_powerOff
		*/
		void C1_powerOff(void);
            

		/** pulse cast input functions */
		/** 
		* Trigger the process with inpulse InpulseA.
		*/
		void BHV_InpulseA(void);
            
		

	private: 

		/** Trigger the process with state functions */
		void triggerStateAction(INTF_MachineProcessNames::E_StateAction stateAction, INTF_MachineProcessNames::E_State baseState);
		
		/** prohibitted default functions */
		PROC_MachineProcess(const PROC_MachineProcess&);
		PROC_MachineProcess& operator=(const PROC_MachineProcess&);

		/** process member data */
		templateunit::cipshell::INTF_ActionMessagePort* m_ActionMessagePort; // action hadler for cip machine
		PROC_MachineProcess& SELF; // own process instance cip macro for operations
		PROC_MachineProcess* MachineProcess; // own instance cip macro for inspections
		INTF_MachineProcess* STATUS; // status vector cip macro
		}; // class PROC_MachineProcess

	} // namespace machinecluster
} // namespace templateunit

#endif // __PROC_MachineProcess__

/*********************************************************************
    End of cip process MachineProcess header for PROCESS MachineProcess
*********************************************************************/
/* Actifsource ID=[45d0d2b1-099f-11e3-b902-17aaca85d2fd,7270396a-9b54-11ef-800e-630ffd8f1eac,726fc458-9b54-11ef-800e-630ffd8f1eac,7270398d-9b54-11ef-800e-630ffd8f1eac,72703969-9b54-11ef-800e-630ffd8f1eac,72703968-9b54-11ef-800e-630ffd8f1eac,72701230-9b54-11ef-800e-630ffd8f1eac,727011f8-9b54-11ef-800e-630ffd8f1eac,0sMAsac5C3MFkEtWqAgDIJgxI9c=] */
