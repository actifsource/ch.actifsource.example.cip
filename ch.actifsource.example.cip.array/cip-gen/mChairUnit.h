/*********************************************************************
	SYSTEM ChairArray
	IMPLEMENTATION ChairImplementation
	Header File for CIP MACHINE mChairUnit
	Filename: mChairUnit.h
	generated by CIP Tool(R)
	
	activated code options:
		C code
		use channel interface
			naming option: use default prefix
		'unsigned long' for delays
*********************************************************************/

#if !defined(_mChairUnit_h_)
	#define _mChairUnit_h_

/* Include Files */

#include <stdlib.h>
#include "sChairUnit.h"

/* Macro Definitions */

#if !defined(FALSE)
	#define FALSE 0
#endif // FALSE

#if !defined(TRUE)
	#define TRUE 1
#endif // TRUE

/* Constants */

#define MAX_PRESSURE  50 
#define MIN_PRESSURE  20 

/* User Types */

typedef int tIndex;

typedef int tIndexArray[CUSHION_COUNT];

/* Outpulse Types */
 
#if !defined(_eOUTPLS__)
	#define _eOUTPLS__

	enum eOUTPLS_
		{/* ChairCluster */ O11_push = 1, O11_released, O12_push, O12_released, O4_push, 
		 O4_release, O5_push, O5_release, O3_evac, O3_fill, O3_stop, O2_limitPressure, 
		 O2_maxPressure, O2_minPressure, O7_evac, O7_fill, O7_stop, O9_addListener, 
		 O9_evac, O9_fill, O9_remListener, O9_stop, O10_triggerEnable};

#endif // _eOUTPLS__

struct tOUTPLS_AllButtonHardener
{
	enum eOUTPLS_ name_;
};

struct tOUTPLS_AllButtonSoftener
{
	enum eOUTPLS_ name_;
};

struct tOUTPLS_ButtonHardener
{
	enum eOUTPLS_ name_;
};

struct tOUTPLS_ButtonSoftener
{
	enum eOUTPLS_ name_;
};

struct tOUTPLS_PassengersControl
{
	enum eOUTPLS_ name_;
};

struct tOUTPLS_Pressure
{
	enum eOUTPLS_ name_;
	union
	{	
		struct tCIPREC_tPressure _tPressure; /* Type of : limitPressure */
	} data_;
};

struct tOUTPLS_PressureControl
{
	enum eOUTPLS_ name_;
};

struct tOUTPLS_Proxy
{
	enum eOUTPLS_ name_;
	union
	{	
		tIndex _tIndex; /* Type of : addListener, remListener */
	} data_;
};

struct tOUTPLS_PumpControl
{
	enum eOUTPLS_ name_;
};

union tOUTPLS_ChairCluster
{
	struct tOUTPLS_AllButtonHardener OUTPLS_AllButtonHardener;
	struct tOUTPLS_AllButtonSoftener OUTPLS_AllButtonSoftener;
	struct tOUTPLS_ButtonHardener OUTPLS_ButtonHardener;
	struct tOUTPLS_ButtonSoftener OUTPLS_ButtonSoftener;
	struct tOUTPLS_PassengersControl OUTPLS_PassengersControl;
	struct tOUTPLS_Pressure OUTPLS_Pressure;
	struct tOUTPLS_PressureControl OUTPLS_PressureControl;
	struct tOUTPLS_Proxy OUTPLS_Proxy;
	struct tOUTPLS_PumpControl OUTPLS_PumpControl;
};

/* Index Tuple Types of Local Channels and Processes */

struct tID_ButtonHardener
{
	int cushionIndex;
};

struct tID_ButtonSoftener
{
	int cushionIndex;
};

struct tID_PassengersControl
{
	int cushionIndex;
};

struct tID_Pressure
{
	int cushionIndex;
};

struct tID_PressureControl
{
	int cushionIndex;
};

struct tID_Proxy
{
	int cushionIndex;
};

struct tID_Valve
{
	int cushionIndex;
};

union tIDPRC_
{
	struct tID_ButtonHardener ID_ButtonHardener;
	struct tID_ButtonSoftener ID_ButtonSoftener;
	struct tID_PassengersControl ID_PassengersControl;
	struct tID_Pressure ID_Pressure;
	struct tID_PressureControl ID_PressureControl;
	struct tID_Proxy ID_Proxy;
	struct tID_Valve ID_Valve;
};

/* Global Output Type */

struct tCHAN_Act_Pump
{
	enum eMSG_Act_Pump name_;
};

union tCHAN_mChairUnit
{
	struct tCHAN_Act_Pump CHAN_Act_Pump;
};

struct tCHNOUT_mChairUnit
{
	union tCHAN_mChairUnit message_;
};

/* Timer- and Queue-Element */

struct tTMEL_mChairUnit
{
	unsigned char set_; /* Boolean */
	unsigned long end_;
};

struct tTMQE_mChairUnit
{
	struct tTMQE_mChairUnit *preced_;
	struct tTMQE_mChairUnit *next_;
	int proctype_;
	union tIDPRC_ *id_;
};

/* Global Table Elements */
struct tTIMING_mChairUnit
{
	void  (*tkhndl_) (void);
	void (*tuhndl_)(void);
	int  set_;
};

struct tCHNING_mChairUnit
{
	void (*chhndl_)(void);
	int  set_;
};

/* Types for Process AllButtonHardener */

struct tPRSTAT_AllButtonHardener
{
	int STATE;
};

union tSTATUS_AllButtonHardener
{
	struct tPRSTAT_AllButtonHardener write_access_;
	struct tPRSTAT_AllButtonHardener read_access_;
};

struct tPRINST_AllButtonHardener
{
	struct tTMEL_mChairUnit timer_;
	struct tTMQE_mChairUnit timeup_;
	struct tTMQE_mChairUnit chain_;
};

/* Types for Process AllButtonSoftener */

struct tPRSTAT_AllButtonSoftener
{
	int STATE;
};

union tSTATUS_AllButtonSoftener
{
	struct tPRSTAT_AllButtonSoftener write_access_;
	struct tPRSTAT_AllButtonSoftener read_access_;
};

/* Types for Process ButtonHardener */

struct tPRSTAT_ButtonHardener
{
	int STATE;
};

union tSTATUS_ButtonHardener
{
	struct tPRSTAT_ButtonHardener write_access_[CUSHION_COUNT];
	struct tPRSTAT_ButtonHardener read_access_[CUSHION_COUNT];
};

/* Types for Process ButtonSoftener */

struct tPRSTAT_ButtonSoftener
{
	int STATE;
};

union tSTATUS_ButtonSoftener
{
	struct tPRSTAT_ButtonSoftener write_access_[CUSHION_COUNT];
	struct tPRSTAT_ButtonSoftener read_access_[CUSHION_COUNT];
};

/* Types for Process PassengersControl */

struct tPRSTAT_PassengersControl
{
	int STATE;
};

union tSTATUS_PassengersControl
{
	struct tPRSTAT_PassengersControl write_access_[CUSHION_COUNT];
	struct tPRSTAT_PassengersControl read_access_[CUSHION_COUNT];
};

/* Types for Process Pressure */

struct tPRSTAT_Pressure
{
	int STATE;
	unsigned int currentPressure;
};

union tSTATUS_Pressure
{
	struct tPRSTAT_Pressure write_access_[CUSHION_COUNT];
	struct tPRSTAT_Pressure read_access_[CUSHION_COUNT];
};

/* Types for Process PressureControl */

struct tPRSTAT_PressureControl
{
	int STATE;
	unsigned int observedPressure;
};

union tSTATUS_PressureControl
{
	struct tPRSTAT_PressureControl write_access_[CUSHION_COUNT];
	struct tPRSTAT_PressureControl read_access_[CUSHION_COUNT];
};

/* Types for Process Proxy */

struct tPRSTAT_Proxy
{
	int STATE;
};

union tSTATUS_Proxy
{
	struct tPRSTAT_Proxy write_access_[CUSHION_COUNT];
	struct tPRSTAT_Proxy read_access_[CUSHION_COUNT];
};

/* Types for Process Pump */

struct tPRSTAT_Pump
{
	int STATE;
};

union tSTATUS_Pump
{
	struct tPRSTAT_Pump write_access_;
	struct tPRSTAT_Pump read_access_;
};

/* Types for Process PumpControl */

struct tPRSTAT_PumpControl
{
	int STATE;
	tIndexArray vEnabledIndexArray;
	tIndex vCurrentIndex;
	tIndex vOldIndex;
};

union tSTATUS_PumpControl
{
	struct tPRSTAT_PumpControl write_access_;
	struct tPRSTAT_PumpControl read_access_;
};

struct tPRINST_PumpControl
{
	struct tTMEL_mChairUnit timer_;
	struct tTMQE_mChairUnit timeup_;
};

/* Types for Process Valve */

struct tPRSTAT_Valve
{
	int STATE;
};

union tSTATUS_Valve
{
	struct tPRSTAT_Valve write_access_[CUSHION_COUNT];
	struct tPRSTAT_Valve read_access_[CUSHION_COUNT];
};

#endif // _mChairUnit_h_

/*********************************************************************
	End of Header File for CIP MACHINE mChairUnit
*********************************************************************/
/* Actifsource ID=[79d4b5d7-259a-11e1-ae2f-a14f3e396de6,2e7be38b-c77a-11ea-9e9f-c1d3048691bc,2e797237-c77a-11ea-9e9f-c1d3048691bc,2e7be3c2-c77a-11ea-9e9f-c1d3048691bc,2e7be38a-c77a-11ea-9e9f-c1d3048691bc,2e7be389-c77a-11ea-9e9f-c1d3048691bc,9PMKTcIEvXfftoLNtXcaRgJfIsM=] */
