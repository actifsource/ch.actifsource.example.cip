/*********************************************************************
	SYSTEM HistorystateSystem
	IMPLEMENTATION Historystate_cpp
	cip process SimpleMachineProcess file for PROCESS SimpleMachineProcess
	Filename: PROC_SimpleMachineProcess.cpp
	generated by CIP Tool(R)
	
	activated code options:
		C++ code
		use message interface
	            naming option: channel  prefix
	        all types in shell
	        'unsigned long' for delays
*********************************************************************/

#include "PROC_SimpleMachineProcess.hpp"

namespace historystatesunit
{

	namespace machinecluster
	{
        
		/** constructors / destructors */
	        PROC_SimpleMachineProcess::PROC_SimpleMachineProcess(
			historystatesunit::cipshell::INTF_ActionMessagePort* i_amp) :     
				INTF_SimpleMachineProcess(),
				m_ActionMessagePort(i_amp),
				SELF(*this),
				SimpleMachineProcess(this) 
		{}// constructor		
		
		/** initialize the pointers to interaction processes */
		void PROC_SimpleMachineProcess::initInteraction(
			void* i_SimpleMachineProcess)
		{
			STATUS = static_cast<INTF_SimpleMachineProcess* >(i_SimpleMachineProcess);
		} // initInteraction()
		
		/** startup the entry function from the process */
		void PROC_SimpleMachineProcess::startup(void)
		{
			triggerStateAction(EntryAction, _no_state_);
		} // startup
		
		
		/** INPORT In */
		/**
		* Trigger the process with message C1_doMachineStuff
		*/
		void PROC_SimpleMachineProcess::C1_doMachineStuff(void)
		{	
			switch(STATE)
			{
				case Idle:	
					/* Exit functions */
					TEMP_STATE = STATE;
					triggerStateAction(ExitAction, PowerOn);
					printf("       TRANSITION '5 doMachineStuff' SimpleMachineProcess.normal: STATE Idle -> Workload_1  [2412b30f-9ac3-11ef-9dfa-835f60e5a95d]\n");
					STATE = Workload_1;
					/* Entry functions */
					triggerStateAction(EntryAction, PowerOn);
				break;
			default:
				break;
			}
		} // C1_doMachineStuff()

		/**
		* Trigger the process with message C1_nextWorkload
		*/
		void PROC_SimpleMachineProcess::C1_nextWorkload(void)
		{	
			switch(STATE)
			{
				case Workload_1:	
					/* Exit functions */
					TEMP_STATE = STATE;
					triggerStateAction(ExitAction, ActiveMode);
					printf("       TRANSITION '6 nextWorkload' SimpleMachineProcess.normal: STATE Workload_1 -> Workload_2  [2e4a5bde-9ac3-11ef-9dfa-835f60e5a95d]\n");
					STATE = Workload_2;
					/* Entry functions */
					triggerStateAction(EntryAction, ActiveMode);
				break;
				case Workload_2:	
					/* Exit functions */
					TEMP_STATE = STATE;
					triggerStateAction(ExitAction, ActiveMode);
					printf("       TRANSITION '7 nextWorkload' SimpleMachineProcess.normal: STATE Workload_2 -> Workload_3  [2f662c17-9ac3-11ef-9dfa-835f60e5a95d]\n");
					STATE = Workload_3;
					/* Entry functions */
					triggerStateAction(EntryAction, ActiveMode);
				break;
				case Workload_3:	
					/* Exit functions */
					TEMP_STATE = STATE;
					triggerStateAction(ExitAction, ActiveMode);
					printf("       TRANSITION '8 nextWorkload' SimpleMachineProcess.normal: STATE Workload_3 -> Workload_1  [483fdda6-9ac3-11ef-9dfa-835f60e5a95d]\n");
					STATE = Workload_1;
					/* Entry functions */
					triggerStateAction(EntryAction, ActiveMode);
				break;
			default:
				break;
			}
		} // C1_nextWorkload()

		/**
		* Trigger the process with message C1_powerFail
		*/
		void PROC_SimpleMachineProcess::C1_powerFail(void)
		{	
			switch(STATE)
			{
				case PowerOn:	
					/* Exit functions */
					STATE = TEMP_STATE;
					triggerStateAction(ExitAction, _no_state_);
					printf("       TRANSITION '9 powerFail' SimpleMachineProcess.normal: STATE PowerOn -> PowerOff  [7c04bce7-9ac3-11ef-9dfa-835f60e5a95d]\n");
					STATE = PowerOff;
					/* Entry functions */
					triggerStateAction(EntryAction, _no_state_);
				break;
				case ActiveMode:
					STATE = PowerOn;
					C1_powerFail();
				break;
				case Idle:
					STATE = PowerOn;
					TEMP_STATE = Idle;
					C1_powerFail();
				break;
				case Workload_1:
					STATE = ActiveMode;
					TEMP_STATE = Workload_1;
					C1_powerFail();
				break;
				case Workload_2:
					STATE = ActiveMode;
					TEMP_STATE = Workload_2;
					C1_powerFail();
				break;
				case Workload_3:
					STATE = ActiveMode;
					TEMP_STATE = Workload_3;
					C1_powerFail();
				break;
			default:
				break;
			}
		} // C1_powerFail()

		/**
		* Trigger the process with message C1_powerOff
		*/
		void PROC_SimpleMachineProcess::C1_powerOff(void)
		{	
			switch(STATE)
			{
				case Idle:	
					/* Exit functions */
					TEMP_STATE = STATE;
					triggerStateAction(ExitAction, _no_state_);
					printf("       TRANSITION '4 powerOff' SimpleMachineProcess.normal: STATE Idle -> PowerOff  [13b67750-9ac3-11ef-9dfa-835f60e5a95d]\n");
					STATE = PowerOff;
					/* Entry functions */
					triggerStateAction(EntryAction, _no_state_);
				break;
			default:
				break;
			}
		} // C1_powerOff()

		/**
		* Trigger the process with message C1_powerOn
		*/
		void PROC_SimpleMachineProcess::C1_powerOn(void)
		{	
			switch(STATE)
			{
				case PowerOff:	
					if (HISTORY_STATE[PowerOn_HistoryState] == Idle)    // CONDITION isNormalPowerOff
					{
						/* Exit functions */
						TEMP_STATE = STATE;
						triggerStateAction(ExitAction, _no_state_);
						printf("       TRANSITION '22 powerOn' SimpleMachineProcess.normal: STATE PowerOff -> Idle  [e0186f6b-9ac4-11ef-9dfa-835f60e5a95d]\n");
						STATE = Idle;
						/* Entry functions */
						triggerStateAction(EntryAction, _no_state_);
					}
					else // CONDITION ELSE_
					{
						/* Exit functions */
						TEMP_STATE = STATE;
						triggerStateAction(ExitAction, _no_state_);
						printf("       TRANSITION '3 powerOn' SimpleMachineProcess.normal: STATE PowerOff -> PowerOn_HistoryState  [e153c093-9ac2-11ef-9dfa-835f60e5a95d]\n");
						STATE = HISTORY_STATE[PowerOn_HistoryState];
						/* Entry functions */
						triggerStateAction(EntryHistoryAction, _no_state_);
					}
				break;
			default:
				break;
			}
		} // C1_powerOn()

		/**
		 * Trigger the process with state functions.
		 */
		void PROC_SimpleMachineProcess::triggerStateAction(INTF_SimpleMachineProcessNames::E_StateAction stateAction, INTF_SimpleMachineProcessNames::E_State baseState)
		{
			switch(stateAction)
			{
			case EntryAction:
			case EntryHistoryAction:
				switch(STATE)
				{
					case ActiveMode:
						if (baseState != PowerOn)
						{
							STATE = PowerOn;
							triggerStateAction(stateAction, baseState);
							STATE = ActiveMode;
						}
						printf("       TRANSITION '11 ENTRY_' SimpleMachineProcess.normal: STATE ActiveMode   [99526a46-9ac3-11ef-9dfa-835f60e5a95d]\n");
					break;
					case Idle:
						if (baseState != PowerOn)
						{
							STATE = PowerOn;
							triggerStateAction(stateAction, baseState);
							STATE = Idle;
						}
						printf("       TRANSITION '15 ENTRY_' SimpleMachineProcess.normal: STATE Idle   [a04289e7-9ac3-11ef-9dfa-835f60e5a95d]\n");
					break;
					case PowerOff:
						printf("       TRANSITION '1 ENTRY_' SimpleMachineProcess.normal: STATE PowerOff   [9c230bba-9ac2-11ef-9dfa-835f60e5a95d]\n");
					break;
					case PowerOn:
						printf("       TRANSITION '10 ENTRY_' SimpleMachineProcess.normal: STATE PowerOn   [97ff0f22-9ac3-11ef-9dfa-835f60e5a95d]\n");
					break;
					case Workload_1:
						if (baseState != ActiveMode)
						{
							STATE = ActiveMode;
							triggerStateAction(stateAction, baseState);
							STATE = Workload_1;
						}
						printf("       TRANSITION '12 ENTRY_' SimpleMachineProcess.normal: STATE Workload_1   [9accfc2f-9ac3-11ef-9dfa-835f60e5a95d]\n");
					break;
					case Workload_2:
						if (baseState != ActiveMode)
						{
							STATE = ActiveMode;
							triggerStateAction(stateAction, baseState);
							STATE = Workload_2;
						}
						printf("       TRANSITION '13 ENTRY_' SimpleMachineProcess.normal: STATE Workload_2   [9bb252dd-9ac3-11ef-9dfa-835f60e5a95d]\n");
					break;
					case Workload_3:
						if (baseState != ActiveMode)
						{
							STATE = ActiveMode;
							triggerStateAction(stateAction, baseState);
							STATE = Workload_3;
						}
						printf("       TRANSITION '14 ENTRY_' SimpleMachineProcess.normal: STATE Workload_3   [9c78142f-9ac3-11ef-9dfa-835f60e5a95d]\n");
					break;
				default:
					return;
				}
			break;
			case ExitAction:
				switch(STATE)
				{
					case ActiveMode:
						printf("       TRANSITION '18 EXIT_' SimpleMachineProcess.normal: STATE ActiveMode   [a3830ecc-9ac3-11ef-9dfa-835f60e5a95d]\n");
						if (baseState != PowerOn)
						{
							STATE = PowerOn;
							triggerStateAction(stateAction, baseState);
							STATE = ActiveMode;
						}
					break;
					case Idle:
						printf("       TRANSITION '16 EXIT_' SimpleMachineProcess.normal: STATE Idle   [a21749a3-9ac3-11ef-9dfa-835f60e5a95d]\n");
						if (baseState != PowerOn)
						{
							STATE = PowerOn;
							triggerStateAction(stateAction, baseState);
							STATE = Idle;
						}
					break;
					case PowerOff:
						printf("       TRANSITION '2 EXIT_' SimpleMachineProcess.normal: STATE PowerOff   [9d62de8f-9ac2-11ef-9dfa-835f60e5a95d]\n");
					break;
					case PowerOn:
						HISTORY_STATE[PowerOn_HistoryState] = TEMP_STATE;
						printf("       TRANSITION '17 EXIT_' SimpleMachineProcess.normal: STATE PowerOn   [a2ea9f57-9ac3-11ef-9dfa-835f60e5a95d]\n");
					break;
					case Workload_1:
						printf("       TRANSITION '19 EXIT_' SimpleMachineProcess.normal: STATE Workload_1   [a4cf16e4-9ac3-11ef-9dfa-835f60e5a95d]\n");
						if (baseState != ActiveMode)
						{
							STATE = ActiveMode;
							triggerStateAction(stateAction, baseState);
							STATE = Workload_1;
						}
					break;
					case Workload_2:
						printf("       TRANSITION '20 EXIT_' SimpleMachineProcess.normal: STATE Workload_2   [a55c89aa-9ac3-11ef-9dfa-835f60e5a95d]\n");
						if (baseState != ActiveMode)
						{
							STATE = ActiveMode;
							triggerStateAction(stateAction, baseState);
							STATE = Workload_2;
						}
					break;
					case Workload_3:
						printf("       TRANSITION '21 EXIT_' SimpleMachineProcess.normal: STATE Workload_3   [a612ba55-9ac3-11ef-9dfa-835f60e5a95d]\n");
						if (baseState != ActiveMode)
						{
							STATE = ActiveMode;
							triggerStateAction(stateAction, baseState);
							STATE = Workload_3;
						}
					break;
				default:
					return;
				}
			break;
			default:
				break;
			}
		} // triggerStateAction()
		
	} // namespace machinecluster
} // namespace historystatesunit
/*********************************************************************
    End of cip process SimpleMachineProcess for PROCESS SimpleMachineProcess
*********************************************************************/
/* Actifsource ID=[1efc54ce-099f-11e3-b902-17aaca85d2fd,1d05cec7-9ac1-11ef-9dfa-835f60e5a95d,73ed890e-9ac0-11ef-9dfa-835f60e5a95d,f0198f93-9ac0-11ef-9dfa-835f60e5a95d,1d05cec6-9ac1-11ef-9dfa-835f60e5a95d,1d05cec5-9ac1-11ef-9dfa-835f60e5a95d,3eff29c8-9ac1-11ef-9dfa-835f60e5a95d,d8702bbe-9ac1-11ef-9dfa-835f60e5a95d,6SQyHdXM/sGCBpoyrBEuW6VBi9c=] */
