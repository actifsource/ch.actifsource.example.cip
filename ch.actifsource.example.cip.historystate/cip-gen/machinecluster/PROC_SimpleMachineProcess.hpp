/*********************************************************************
	SYSTEM HistorystateSystem
	IMPLEMENTATION Historystate_cpp
	cip process SimpleMachineProcess header file for PROCESS SimpleMachineProcess
	Filename: PROC_SimpleMachineProcess.hpp
	generated by CIP Tool(R)
	
	activated code options:
		C++ code
		use message interface
	            naming option: channel  prefix
	        all types in shell
	        'unsigned long' for delays
*********************************************************************/

#if !defined(__PROC_SimpleMachineProcess__)
    #define __PROC_SimpleMachineProcess__

#include "INTF_SimpleMachineProcess.hpp"
#include "INTF_ActionMessagePort.hpp"
#include "CIPS_sHistorystateSUnit.hpp"
#include "INTF_Constant.hpp"
#include "INTF_SimpleMachineProcessNames.hpp"

namespace historystatesunit
{

	namespace machinecluster
	{
	
		/** 
		* class PROC_SimpleMachineProcess
		* process SimpleMachineProcess class
		*/
		class PROC_SimpleMachineProcess : 
			public INTF_SimpleMachineProcess, 
			public INTF_SimpleMachineProcessNames, 
			public historystatesunit::cipshell::INTF_Constant
		{
		public: 
            
		/** constructors / destructors */
		PROC_SimpleMachineProcess(
			historystatesunit::cipshell::INTF_ActionMessagePort* i_amp);
            
		virtual ~PROC_SimpleMachineProcess(void){}
  
		/** initialize the pointers to interaction processes */
		void initInteraction(
			void* i_SimpleMachineProcess);
		
		/** startup the entry function from the process */	
		void startup(void);

		/** INPORT EVENT_PORT */
		/** 
		* Trigger the process with message C1_powerOn
		*/
		void C1_powerOn(void);
            
		/** 
		* Trigger the process with message C1_powerOff
		*/
		void C1_powerOff(void);
            
		/** 
		* Trigger the process with message C1_doMachineStuff
		*/
		void C1_doMachineStuff(void);
            
		/** 
		* Trigger the process with message C1_nextWorkload
		*/
		void C1_nextWorkload(void);
            
		/** 
		* Trigger the process with message C1_powerFail
		*/
		void C1_powerFail(void);
            
		

	private: 

		/** Trigger the process with state functions */
		void triggerStateAction(INTF_SimpleMachineProcessNames::E_StateAction stateAction, INTF_SimpleMachineProcessNames::E_State baseState);
		
		/** prohibitted default functions */
		PROC_SimpleMachineProcess(const PROC_SimpleMachineProcess&);
		PROC_SimpleMachineProcess& operator=(const PROC_SimpleMachineProcess&);

		/** process member data */
		historystatesunit::cipshell::INTF_ActionMessagePort* m_ActionMessagePort; // action hadler for cip machine
		PROC_SimpleMachineProcess& SELF; // own process instance cip macro for operations
		PROC_SimpleMachineProcess* SimpleMachineProcess; // own instance cip macro for inspections
		INTF_SimpleMachineProcess* STATUS; // status vector cip macro
		}; // class PROC_SimpleMachineProcess

	} // namespace machinecluster
} // namespace historystatesunit

#endif // __PROC_SimpleMachineProcess__

/*********************************************************************
    End of cip process SimpleMachineProcess header for PROCESS SimpleMachineProcess
*********************************************************************/
/* Actifsource ID=[45d0d2b1-099f-11e3-b902-17aaca85d2fd,1d05cec7-9ac1-11ef-9dfa-835f60e5a95d,73ed890e-9ac0-11ef-9dfa-835f60e5a95d,f0198f93-9ac0-11ef-9dfa-835f60e5a95d,1d05cec6-9ac1-11ef-9dfa-835f60e5a95d,1d05cec5-9ac1-11ef-9dfa-835f60e5a95d,3eff29c8-9ac1-11ef-9dfa-835f60e5a95d,d8702bbe-9ac1-11ef-9dfa-835f60e5a95d,unhx0VCvSee7RtC0e1s2nAQDdSk=] */
