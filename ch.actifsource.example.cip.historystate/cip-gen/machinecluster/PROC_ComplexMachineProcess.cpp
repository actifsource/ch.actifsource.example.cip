/*********************************************************************
	SYSTEM HistorystateSystem
	IMPLEMENTATION Historystate_cpp
	cip process ComplexMachineProcess file for PROCESS ComplexMachineProcess
	Filename: PROC_ComplexMachineProcess.cpp
	generated by CIP Tool(R)
	
	activated code options:
		C++ code
		use message interface
	            naming option: channel  prefix
	        all types in shell
	        'unsigned long' for delays
*********************************************************************/

#include "PROC_ComplexMachineProcess.hpp"

namespace historystatesunit
{

	namespace machinecluster
	{
        
		/** constructors / destructors */
	        PROC_ComplexMachineProcess::PROC_ComplexMachineProcess(
			historystatesunit::cipshell::INTF_ActionMessagePort* i_amp) :     
				INTF_ComplexMachineProcess(),
				m_ActionMessagePort(i_amp),
				SELF(*this),
				ComplexMachineProcess(this) 
		{}// constructor		
		
		/** initialize the pointers to interaction processes */
		void PROC_ComplexMachineProcess::initInteraction(
			void* i_ComplexMachineProcess)
		{
			STATUS = static_cast<INTF_ComplexMachineProcess* >(i_ComplexMachineProcess);
		} // initInteraction()
		
		/** startup the entry function from the process */
		void PROC_ComplexMachineProcess::startup(void)
		{
			triggerStateAction(EntryAction, _no_state_);
		} // startup
		
		
		/** INPORT In */
		/**
		* Trigger the process with message C2_doMachineStuff
		*/
		void PROC_ComplexMachineProcess::C2_doMachineStuff(void)
		{	
			switch(STATE)
			{
				case Idle:	
					/* Exit functions */
					TEMP_STATE = STATE;
					triggerStateAction(ExitAction, PowerOn);
					printf("       TRANSITION '5 doMachineStuff' ComplexMachineProcess.normal: STATE Idle -> Workload_1  [0dca8467-9ac7-11ef-9dfa-835f60e5a95d]\n");
					STATE = Workload_1;
					/* Entry functions */
					triggerStateAction(EntryAction, PowerOn);
				break;
			default:
				break;
			}
		} // C2_doMachineStuff()

		/**
		* Trigger the process with message C2_nextWorkload
		*/
		void PROC_ComplexMachineProcess::C2_nextWorkload(void)
		{	
			switch(STATE)
			{
				case Workload_1:	
					/* Exit functions */
					TEMP_STATE = STATE;
					triggerStateAction(ExitAction, ActiveMode);
					printf("       TRANSITION '6 nextWorkload' ComplexMachineProcess.normal: STATE Workload_1 -> Workload_2  [0dca846c-9ac7-11ef-9dfa-835f60e5a95d]\n");
					STATE = Workload_2;
					/* Entry functions */
					triggerStateAction(EntryAction, ActiveMode);
				break;
				case Workload_2:	
					/* Exit functions */
					TEMP_STATE = STATE;
					triggerStateAction(ExitAction, ActiveMode);
					printf("       TRANSITION '7 nextWorkload' ComplexMachineProcess.normal: STATE Workload_2 -> Workload_3  [0dca8470-9ac7-11ef-9dfa-835f60e5a95d]\n");
					STATE = Workload_3;
					/* Entry functions */
					triggerStateAction(EntryAction, ActiveMode);
				break;
				case Workload_3:	
					/* Exit functions */
					TEMP_STATE = STATE;
					triggerStateAction(ExitAction, ActiveMode);
					printf("       TRANSITION '8 nextWorkload' ComplexMachineProcess.normal: STATE Workload_3 -> Workload_1  [0dca8474-9ac7-11ef-9dfa-835f60e5a95d]\n");
					STATE = Workload_1;
					/* Entry functions */
					triggerStateAction(EntryAction, ActiveMode);
				break;
			default:
				break;
			}
		} // C2_nextWorkload()

		/**
		* Trigger the process with message C2_powerFail
		*/
		void PROC_ComplexMachineProcess::C2_powerFail(void)
		{	
			switch(STATE)
			{
				case PowerOn:	
					/* Exit functions */
					STATE = TEMP_STATE;
					triggerStateAction(ExitAction, _no_state_);
					printf("       TRANSITION '9 powerFail' ComplexMachineProcess.normal: STATE PowerOn -> PowerOff  [0dca847c-9ac7-11ef-9dfa-835f60e5a95d]\n");
					STATE = PowerOff;
					/* Entry functions */
					triggerStateAction(EntryAction, _no_state_);
				break;
				case ActiveMode:
					STATE = PowerOn;
					C2_powerFail();
				break;
				case Idle:
					STATE = PowerOn;
					TEMP_STATE = Idle;
					C2_powerFail();
				break;
				case Workload_1:
					STATE = ActiveMode;
					TEMP_STATE = Workload_1;
					C2_powerFail();
				break;
				case Workload_2:
					STATE = ActiveMode;
					TEMP_STATE = Workload_2;
					C2_powerFail();
				break;
				case Workload_3:
					STATE = ActiveMode;
					TEMP_STATE = Workload_3;
					C2_powerFail();
				break;
			default:
				break;
			}
		} // C2_powerFail()

		/**
		* Trigger the process with message C2_powerOff
		*/
		void PROC_ComplexMachineProcess::C2_powerOff(void)
		{	
			switch(STATE)
			{
				case Idle:	
					/* Exit functions */
					TEMP_STATE = STATE;
					triggerStateAction(ExitAction, _no_state_);
					printf("       TRANSITION '4 powerOff' ComplexMachineProcess.normal: STATE Idle -> PowerOff  [0dca8466-9ac7-11ef-9dfa-835f60e5a95d]\n");
					STATE = PowerOff;
					/* Entry functions */
					triggerStateAction(EntryAction, _no_state_);
				break;
			default:
				break;
			}
		} // C2_powerOff()

		/**
		* Trigger the process with message C2_powerOn
		*/
		void PROC_ComplexMachineProcess::C2_powerOn(void)
		{	
			switch(STATE)
			{
				case PowerOff:	
					if (HISTORY_STATE[PowerOn_HistoryState] == Idle)    // CONDITION isNormalPowerOff
					{
						/* Exit functions */
						TEMP_STATE = STATE;
						triggerStateAction(ExitAction, _no_state_);
						printf("       TRANSITION '22 powerOn' ComplexMachineProcess.normal: STATE PowerOff -> Idle  [0dca845f-9ac7-11ef-9dfa-835f60e5a95d]\n");
						STATE = Idle;
						/* Entry functions */
						triggerStateAction(EntryAction, _no_state_);
					}
					else // CONDITION ELSE_
					{
						/* Exit functions */
						TEMP_STATE = STATE;
						triggerStateAction(ExitAction, _no_state_);
						printf("       TRANSITION '3 powerOn' ComplexMachineProcess.normal: STATE PowerOff -> PowerOn_HistoryState  [0dca8460-9ac7-11ef-9dfa-835f60e5a95d]\n");
						STATE = getHistoryState(PowerOn_HistoryState, _no_state_);
						/* Entry functions */
						triggerStateAction(EntryHistoryAction, _no_state_);
					}
				break;
			default:
				break;
			}
		} // C2_powerOn()

		/**
		 * Returns the history target state by history state.
		 */
		INTF_ComplexMachineProcessNames::E_State PROC_ComplexMachineProcess::getHistoryState(INTF_ComplexMachineProcessNames::E_HistoryState historyState, INTF_ComplexMachineProcessNames::E_State baseState) const
		{
			INTF_ComplexMachineProcessNames::E_State state = getRedirectHistoryState(HISTORY_STATE[historyState], baseState);
			if (state != _no_state_)
			{
				return state;
			}
			return HISTORY_STATE[historyState];
		}
		
		/**
		 * Returns the redirect target for the history state.
		 */
		INTF_ComplexMachineProcessNames::E_State PROC_ComplexMachineProcess::getRedirectHistoryState(INTF_ComplexMachineProcessNames::E_State state, INTF_ComplexMachineProcessNames::E_State baseState) const
		{
			switch(state)
			{
				case PowerOff:
					return _no_state_;
				case PowerOn:
					return _no_state_;
				case Idle:
					if (baseState != PowerOn)
					{
						return getRedirectHistoryState(PowerOn, baseState);
					}
					break;	
				case ActiveMode:
					return Workload_1;
				case Workload_1:
					if (baseState != ActiveMode)
					{
						return getRedirectHistoryState(ActiveMode, baseState);
					}
					break;	
				case Workload_2:
					if (baseState != ActiveMode)
					{
						return getRedirectHistoryState(ActiveMode, baseState);
					}
					break;	
				case Workload_3:
					if (baseState != ActiveMode)
					{
						return getRedirectHistoryState(ActiveMode, baseState);
					}
					break;	
			default:
				break;
			}
			
			return _no_state_;
		}
		
		/**
		 * Trigger the process with state functions.
		 */
		void PROC_ComplexMachineProcess::triggerStateAction(INTF_ComplexMachineProcessNames::E_StateAction stateAction, INTF_ComplexMachineProcessNames::E_State baseState)
		{
			switch(stateAction)
			{
			case EntryAction:
			case EntryHistoryAction:
				switch(STATE)
				{
					case ActiveMode:
						if (baseState != PowerOn)
						{
							STATE = PowerOn;
							triggerStateAction(stateAction, baseState);
							STATE = ActiveMode;
						}
						if (stateAction == EntryHistoryAction)
						{
							printf("       TRANSITION '24 ENTRY_' ComplexMachineProcess.normal: STATE ActiveMode   [c627c8d2-9ac7-11ef-9dfa-835f60e5a95d]\n");
							break;
						}
						printf("       TRANSITION '11 ENTRY_' ComplexMachineProcess.normal: STATE ActiveMode   [0dca8478-9ac7-11ef-9dfa-835f60e5a95d]\n");
					break;
					case Idle:
						if (baseState != PowerOn)
						{
							STATE = PowerOn;
							triggerStateAction(stateAction, baseState);
							STATE = Idle;
						}
						printf("       TRANSITION '15 ENTRY_' ComplexMachineProcess.normal: STATE Idle   [0dca8468-9ac7-11ef-9dfa-835f60e5a95d]\n");
					break;
					case PowerOff:
						printf("       TRANSITION '1 ENTRY_' ComplexMachineProcess.normal: STATE PowerOff   [0dca845d-9ac7-11ef-9dfa-835f60e5a95d]\n");
					break;
					case PowerOn:
						if (stateAction == EntryHistoryAction)
						{
							printf("       TRANSITION '23 ENTRY_' ComplexMachineProcess.normal: STATE PowerOn   [c59f1096-9ac7-11ef-9dfa-835f60e5a95d]\n");
							break;
						}
						printf("       TRANSITION '10 ENTRY_' ComplexMachineProcess.normal: STATE PowerOn   [0dca847d-9ac7-11ef-9dfa-835f60e5a95d]\n");
					break;
					case Workload_1:
						if (baseState != ActiveMode)
						{
							STATE = ActiveMode;
							triggerStateAction(stateAction, baseState);
							STATE = Workload_1;
						}
						printf("       TRANSITION '12 ENTRY_' ComplexMachineProcess.normal: STATE Workload_1   [0dca846d-9ac7-11ef-9dfa-835f60e5a95d]\n");
					break;
					case Workload_2:
						if (baseState != ActiveMode)
						{
							STATE = ActiveMode;
							triggerStateAction(stateAction, baseState);
							STATE = Workload_2;
						}
						printf("       TRANSITION '13 ENTRY_' ComplexMachineProcess.normal: STATE Workload_2   [0dca8471-9ac7-11ef-9dfa-835f60e5a95d]\n");
					break;
					case Workload_3:
						if (baseState != ActiveMode)
						{
							STATE = ActiveMode;
							triggerStateAction(stateAction, baseState);
							STATE = Workload_3;
						}
						printf("       TRANSITION '14 ENTRY_' ComplexMachineProcess.normal: STATE Workload_3   [0dca8475-9ac7-11ef-9dfa-835f60e5a95d]\n");
					break;
				default:
					return;
				}
			break;
			case ExitAction:
				switch(STATE)
				{
					case ActiveMode:
						HISTORY_STATE[ActiveMode_HistoryState] = TEMP_STATE;
						printf("       TRANSITION '18 EXIT_' ComplexMachineProcess.normal: STATE ActiveMode   [0dca8479-9ac7-11ef-9dfa-835f60e5a95d]\n");
						if (baseState != PowerOn)
						{
							STATE = PowerOn;
							triggerStateAction(stateAction, baseState);
							STATE = ActiveMode;
						}
					break;
					case Idle:
						printf("       TRANSITION '16 EXIT_' ComplexMachineProcess.normal: STATE Idle   [0dca8469-9ac7-11ef-9dfa-835f60e5a95d]\n");
						if (baseState != PowerOn)
						{
							STATE = PowerOn;
							triggerStateAction(stateAction, baseState);
							STATE = Idle;
						}
					break;
					case PowerOff:
						printf("       TRANSITION '2 EXIT_' ComplexMachineProcess.normal: STATE PowerOff   [0dca845e-9ac7-11ef-9dfa-835f60e5a95d]\n");
					break;
					case PowerOn:
						HISTORY_STATE[PowerOn_HistoryState] = TEMP_STATE;
						printf("       TRANSITION '17 EXIT_' ComplexMachineProcess.normal: STATE PowerOn   [0dca847e-9ac7-11ef-9dfa-835f60e5a95d]\n");
					break;
					case Workload_1:
						printf("       TRANSITION '19 EXIT_' ComplexMachineProcess.normal: STATE Workload_1   [0dca846e-9ac7-11ef-9dfa-835f60e5a95d]\n");
						if (baseState != ActiveMode)
						{
							STATE = ActiveMode;
							triggerStateAction(stateAction, baseState);
							STATE = Workload_1;
						}
					break;
					case Workload_2:
						printf("       TRANSITION '20 EXIT_' ComplexMachineProcess.normal: STATE Workload_2   [0dca8472-9ac7-11ef-9dfa-835f60e5a95d]\n");
						if (baseState != ActiveMode)
						{
							STATE = ActiveMode;
							triggerStateAction(stateAction, baseState);
							STATE = Workload_2;
						}
					break;
					case Workload_3:
						printf("       TRANSITION '21 EXIT_' ComplexMachineProcess.normal: STATE Workload_3   [0dca8476-9ac7-11ef-9dfa-835f60e5a95d]\n");
						if (baseState != ActiveMode)
						{
							STATE = ActiveMode;
							triggerStateAction(stateAction, baseState);
							STATE = Workload_3;
						}
					break;
				default:
					return;
				}
			break;
			default:
				break;
			}
		} // triggerStateAction()
		
	} // namespace machinecluster
} // namespace historystatesunit
/*********************************************************************
    End of cip process ComplexMachineProcess for PROCESS ComplexMachineProcess
*********************************************************************/
/* Actifsource ID=[1efc54ce-099f-11e3-b902-17aaca85d2fd,1d05cec7-9ac1-11ef-9dfa-835f60e5a95d,73ed890e-9ac0-11ef-9dfa-835f60e5a95d,f0198f93-9ac0-11ef-9dfa-835f60e5a95d,1d05cec6-9ac1-11ef-9dfa-835f60e5a95d,1d05cec5-9ac1-11ef-9dfa-835f60e5a95d,3eff29c8-9ac1-11ef-9dfa-835f60e5a95d,0dca5d23-9ac7-11ef-9dfa-835f60e5a95d,TCJ38IGQ1Rf0qLhS98YDsIMa2GE=] */
