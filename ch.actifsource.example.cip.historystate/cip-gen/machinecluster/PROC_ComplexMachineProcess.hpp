/*********************************************************************
	SYSTEM HistorystateSystem
	IMPLEMENTATION Historystate_cpp
	cip process ComplexMachineProcess header file for PROCESS ComplexMachineProcess
	Filename: PROC_ComplexMachineProcess.hpp
	generated by CIP Tool(R)
	
	activated code options:
		C++ code
		use message interface
	            naming option: channel  prefix
	        all types in shell
	        'unsigned long' for delays
*********************************************************************/

#if !defined(__PROC_ComplexMachineProcess__)
    #define __PROC_ComplexMachineProcess__

#include "INTF_ComplexMachineProcess.hpp"
#include "INTF_ActionMessagePort.hpp"
#include "CIPS_sHistorystateSUnit.hpp"
#include "INTF_Constant.hpp"
#include "INTF_ComplexMachineProcessNames.hpp"

namespace historystatesunit
{

	namespace machinecluster
	{
	
		/** 
		* class PROC_ComplexMachineProcess
		* process ComplexMachineProcess class
		*/
		class PROC_ComplexMachineProcess : 
			public INTF_ComplexMachineProcess, 
			public INTF_ComplexMachineProcessNames, 
			public historystatesunit::cipshell::INTF_Constant
		{
		public: 
            
		/** constructors / destructors */
		PROC_ComplexMachineProcess(
			historystatesunit::cipshell::INTF_ActionMessagePort* i_amp);
            
		virtual ~PROC_ComplexMachineProcess(void){}
  
		/** initialize the pointers to interaction processes */
		void initInteraction(
			void* i_ComplexMachineProcess);
		
		/** startup the entry function from the process */	
		void startup(void);

		/** INPORT EVENT_PORT */
		/** 
		* Trigger the process with message C2_powerOn
		*/
		void C2_powerOn(void);
            
		/** 
		* Trigger the process with message C2_powerOff
		*/
		void C2_powerOff(void);
            
		/** 
		* Trigger the process with message C2_doMachineStuff
		*/
		void C2_doMachineStuff(void);
            
		/** 
		* Trigger the process with message C2_nextWorkload
		*/
		void C2_nextWorkload(void);
            
		/** 
		* Trigger the process with message C2_powerFail
		*/
		void C2_powerFail(void);
            
		

	private: 

		/** Returns the history target state by history state. */
		INTF_ComplexMachineProcessNames::E_State getHistoryState(INTF_ComplexMachineProcessNames::E_HistoryState historyState, INTF_ComplexMachineProcessNames::E_State baseState) const;
		
		/** Returns the redirect target for the history state */
		INTF_ComplexMachineProcessNames::E_State getRedirectHistoryState(INTF_ComplexMachineProcessNames::E_State historyState, INTF_ComplexMachineProcessNames::E_State baseState) const;
		
		/** Trigger the process with state functions */
		void triggerStateAction(INTF_ComplexMachineProcessNames::E_StateAction stateAction, INTF_ComplexMachineProcessNames::E_State baseState);
		
		/** prohibitted default functions */
		PROC_ComplexMachineProcess(const PROC_ComplexMachineProcess&);
		PROC_ComplexMachineProcess& operator=(const PROC_ComplexMachineProcess&);

		/** process member data */
		historystatesunit::cipshell::INTF_ActionMessagePort* m_ActionMessagePort; // action hadler for cip machine
		PROC_ComplexMachineProcess& SELF; // own process instance cip macro for operations
		PROC_ComplexMachineProcess* ComplexMachineProcess; // own instance cip macro for inspections
		INTF_ComplexMachineProcess* STATUS; // status vector cip macro
		}; // class PROC_ComplexMachineProcess

	} // namespace machinecluster
} // namespace historystatesunit

#endif // __PROC_ComplexMachineProcess__

/*********************************************************************
    End of cip process ComplexMachineProcess header for PROCESS ComplexMachineProcess
*********************************************************************/
/* Actifsource ID=[45d0d2b1-099f-11e3-b902-17aaca85d2fd,1d05cec7-9ac1-11ef-9dfa-835f60e5a95d,73ed890e-9ac0-11ef-9dfa-835f60e5a95d,f0198f93-9ac0-11ef-9dfa-835f60e5a95d,1d05cec6-9ac1-11ef-9dfa-835f60e5a95d,1d05cec5-9ac1-11ef-9dfa-835f60e5a95d,3eff29c8-9ac1-11ef-9dfa-835f60e5a95d,0dca5d23-9ac7-11ef-9dfa-835f60e5a95d,mub/gEs+vtu2MywwkmehNQjJ51I=] */
